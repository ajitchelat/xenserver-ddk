{
    "docs": [
        {
            "location": "/", 
            "text": "Citrix XenServer Supplemental Packs and the DDK Guide\n\n\nSupplemental packs are used to modify and extend the functionality of a XenServer host, by installing software into the control domain, dom0.\nFor example, an OEM partner might wish to ship XenServer with a suite of management tools that require SNMP agents to be installed, or provide a driver that supports the latest hardware.\nUsers can add supplemental packs either during initial XenServer installation, or at any time afterwards.\nFacilities also exist for OEM partners to add their supplemental packs to the XenServer installation repositories, in order to allow automated factory installations.\n\n\nPurpose of supplemental packs\n\n\nSupplemental packs consist of a number of packages along with information describing their relationship to other packs.\nIndividual packages are in the Red Hat RPM file format, and must be able to install and uninstall cleanly on a fresh installation of XenServer.\n\n\nPacks are created using the XenServer Driver Development Kit (DDK).\nThis has been extended to not only allow the creation of supplemental packs containing only drivers (also known as driver disks), but also packs containing userspace software to be installed into dom0.\n\n\nExamples and tools are included in the XenServer DDK to help developers create their own supplemental packs.\nHowever, for partners wishing to integrate pack creation into their existing build environments, only a few scripts taken from the DDK are necessary.\n\n\nWhy a separate DDK?\n\n\nXenServer is based on a standard Linux distribution, but for performance, maintainability, and compatibility reasons ad-hoc modifications to the core Linux components are not supported.\nAs a result, operations that require recompiling drivers for the Linux kernel require formal guidance from Citrix, which the DDK provides.\nIn addition, the DDK provides the necessary compile infrastructure to achieve this, whereas a XenServer installation does not.\n\n\nXenServer integrates the latest device support from kernel.org on a regular basis to provide a current set of device drivers.\nHowever, assuming appropriate redistribution agreements can be reached, there are situations where including additional device drivers in the shipping XenServer product, such as drivers not available through kernel.org, or drivers that have functionality not available through kernel.org, is greatly beneficial to joint customers of Citrix and the device manufacturer.\nThe same benefits can apply by supplying device drivers independent of the XenServer product.\n\n\nIn addition, components such as command line interfaces (CLIs) for configuring and managing devices are also very valuable to include in the shipped XenServer product.\nSome of these components are simple binary RPM installs, but in many cases they are combined with the full driver installation making them difficult or impossible for\nadministrators to install into XenServer.\nIn either case including current versions of everything the administrator requires to use the device on XenServer in a supplemental pack provides significant value.\n\n\nThe DDK allows driver vendors to perform the necessary packaging and compilation steps with the XenServer kernel, which is not possible with the XenServer product alone.\nSupplemental packs can be used to package up both drivers and userspace tools into one convenient ISO that can be easily installed by XenServer users.\n\n\nBenefits\n\n\nSupplemental packs have a variety of benefits over and above partners producing their own methods for installing add-on software into XenServer:\n\n\n\n\n\n\nIntegration with the XenServer installer: users are prompted to provide any extra drivers or supplemental packs at installation time.\n    In addition, on upgrade, users are provided with a list of currently installed packs, and warned that they may require a new version of them that is compatible with the new version of XenServer.\n\n\n\n\n\n\nFlexibility in release cycles: partners are no longer tied to only releasing updates to their add-on software whenever new versions of XenServer are released.\n    Instead, partners are free to release as often as they choose.\n    The only constraint is the need to test packs on the newest version of XenServer when it is released.\n\n\n\n\n\n\nIntegration with Server Status Reports: supplemental pack metadata can include lists of files (or commands to be run) that should be collected when a Server Status Report is collected using XenCenter.\n    Pack authors can choose to create new categories, or add to existing ones, to provide more user-friendly bug reporting.\n\n\n\n\n\n\nGuarantee of integrity: supplemental packs are signed by the creator, allowing users to be certain of their origin.\n\n\n\n\n\n\nInclude formal dependency information: pack metadata can detail installation requirements such as which versions of XenServer the pack can be installed upon.\n\n\n\n\n\n\nInclusion in the Citrix Ready catalogue: partners whose supplemental packs meet certain certification criteria will be allowed to list their packs in the Citrix Ready online catalogue, thus increasing their visibility in the marketplace.\n    Note that partners must become members of the program before their packs can be listed: the entry level category of membership is fee-free.\n\n\n\n\n\n\nWhat should (not) be in a supplemental pack?\n\n\nCitrix recognises that partner organizations can contribute significant value to the XenServer product by building solutions upon it.\nExamples include host management and monitoring tools, backup utilities, and device-specific firmware.\nIn many cases, \nsome\n of these solutions will need to be hosted in the XenServer control domain, dom0, generally because they need privileged access to the hardware.\n\n\nWhilst supplemental packs provide the mechanism for installing components into dom0, pack authors should try to install \nas little as possible\n using packs.\nInstead, the majority of partner software should be placed into appliance virtual machines, which have the advantage that the operating system environment can be configured exactly as required by the software to be run in them.\n\n\nThe reasons for this stipulation are:\n\n\n\n\n\n\nXenServer stability and QA: Citrix invests considerable resources in testing the stability of XenServer.\n    Significant modifications to dom0 are likely to have unpredictable effects on the performance of the product, particularly if they are resource-hungry.\n\n\n\n\n\n\nSupportability: the XenServer control domain is well-known to Citrix support teams.\n    If it is heavily modified, dom0 becomes very difficult to identify whether the cause of the problem is a component of XenServer, or due to a supplemental pack.\n    In many cases, customers may be asked to reproduce the problem on an unmodified version of XenServer, which can cause customer dissatisfaction with the organization whose pack has been installed.\n    Similarly, when a pack author is asked to debug a problem perceived to be with their pack, having the majority of the components of the pack in an appliance VM of known/static configuration can significantly ease diagnosis.\n\n\n\n\n\n\nResource starvation: dom0 is limited in memory and processing power.\n    If resource-hungry processes are installed by a supplemental pack, resource starvation can occur.\n    This can impact both XenServer stability and the correct functioning of the supplemental pack.\n    Note that Citrix does not advise increasing the number of dom0 vCPUs.\n\n\n\n\n\n\nSecurity: XenServer dom0 is designed to ensure the security of the hosts that it is installed on to.\n    Any security issues found in software that is installed into dom0 can mean that the host is open to compromise.\n    Hence, the smaller the quantity of software installed into dom0 by a pack, the lower the likelihood that XenServer hosts will be compromised due to a flaw in the software of the pack.\n\n\n\n\n\n\nPartners often ask whether supplemental packs can include heavy-weight software, such as the Java runtime environment, or a web server.\nThis type of component is not suitable for inclusion in dom0, and should instead be placed in an appliance VM.\nIn many cases, the functionality that is desired can be achieved using such an appliance VM, in conjunction with the Xen API.\nCitrix can provide advice to partners in such cases.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#citrix-xenserver-supplemental-packs-and-the-ddk-guide", 
            "text": "Supplemental packs are used to modify and extend the functionality of a XenServer host, by installing software into the control domain, dom0.\nFor example, an OEM partner might wish to ship XenServer with a suite of management tools that require SNMP agents to be installed, or provide a driver that supports the latest hardware.\nUsers can add supplemental packs either during initial XenServer installation, or at any time afterwards.\nFacilities also exist for OEM partners to add their supplemental packs to the XenServer installation repositories, in order to allow automated factory installations.", 
            "title": "Citrix XenServer Supplemental Packs and the DDK Guide"
        }, 
        {
            "location": "/#purpose-of-supplemental-packs", 
            "text": "Supplemental packs consist of a number of packages along with information describing their relationship to other packs.\nIndividual packages are in the Red Hat RPM file format, and must be able to install and uninstall cleanly on a fresh installation of XenServer.  Packs are created using the XenServer Driver Development Kit (DDK).\nThis has been extended to not only allow the creation of supplemental packs containing only drivers (also known as driver disks), but also packs containing userspace software to be installed into dom0.  Examples and tools are included in the XenServer DDK to help developers create their own supplemental packs.\nHowever, for partners wishing to integrate pack creation into their existing build environments, only a few scripts taken from the DDK are necessary.", 
            "title": "Purpose of supplemental packs"
        }, 
        {
            "location": "/#why-a-separate-ddk", 
            "text": "XenServer is based on a standard Linux distribution, but for performance, maintainability, and compatibility reasons ad-hoc modifications to the core Linux components are not supported.\nAs a result, operations that require recompiling drivers for the Linux kernel require formal guidance from Citrix, which the DDK provides.\nIn addition, the DDK provides the necessary compile infrastructure to achieve this, whereas a XenServer installation does not.  XenServer integrates the latest device support from kernel.org on a regular basis to provide a current set of device drivers.\nHowever, assuming appropriate redistribution agreements can be reached, there are situations where including additional device drivers in the shipping XenServer product, such as drivers not available through kernel.org, or drivers that have functionality not available through kernel.org, is greatly beneficial to joint customers of Citrix and the device manufacturer.\nThe same benefits can apply by supplying device drivers independent of the XenServer product.  In addition, components such as command line interfaces (CLIs) for configuring and managing devices are also very valuable to include in the shipped XenServer product.\nSome of these components are simple binary RPM installs, but in many cases they are combined with the full driver installation making them difficult or impossible for\nadministrators to install into XenServer.\nIn either case including current versions of everything the administrator requires to use the device on XenServer in a supplemental pack provides significant value.  The DDK allows driver vendors to perform the necessary packaging and compilation steps with the XenServer kernel, which is not possible with the XenServer product alone.\nSupplemental packs can be used to package up both drivers and userspace tools into one convenient ISO that can be easily installed by XenServer users.", 
            "title": "Why a separate DDK?"
        }, 
        {
            "location": "/#benefits", 
            "text": "Supplemental packs have a variety of benefits over and above partners producing their own methods for installing add-on software into XenServer:    Integration with the XenServer installer: users are prompted to provide any extra drivers or supplemental packs at installation time.\n    In addition, on upgrade, users are provided with a list of currently installed packs, and warned that they may require a new version of them that is compatible with the new version of XenServer.    Flexibility in release cycles: partners are no longer tied to only releasing updates to their add-on software whenever new versions of XenServer are released.\n    Instead, partners are free to release as often as they choose.\n    The only constraint is the need to test packs on the newest version of XenServer when it is released.    Integration with Server Status Reports: supplemental pack metadata can include lists of files (or commands to be run) that should be collected when a Server Status Report is collected using XenCenter.\n    Pack authors can choose to create new categories, or add to existing ones, to provide more user-friendly bug reporting.    Guarantee of integrity: supplemental packs are signed by the creator, allowing users to be certain of their origin.    Include formal dependency information: pack metadata can detail installation requirements such as which versions of XenServer the pack can be installed upon.    Inclusion in the Citrix Ready catalogue: partners whose supplemental packs meet certain certification criteria will be allowed to list their packs in the Citrix Ready online catalogue, thus increasing their visibility in the marketplace.\n    Note that partners must become members of the program before their packs can be listed: the entry level category of membership is fee-free.", 
            "title": "Benefits"
        }, 
        {
            "location": "/#what-should-not-be-in-a-supplemental-pack", 
            "text": "Citrix recognises that partner organizations can contribute significant value to the XenServer product by building solutions upon it.\nExamples include host management and monitoring tools, backup utilities, and device-specific firmware.\nIn many cases,  some  of these solutions will need to be hosted in the XenServer control domain, dom0, generally because they need privileged access to the hardware.  Whilst supplemental packs provide the mechanism for installing components into dom0, pack authors should try to install  as little as possible  using packs.\nInstead, the majority of partner software should be placed into appliance virtual machines, which have the advantage that the operating system environment can be configured exactly as required by the software to be run in them.  The reasons for this stipulation are:    XenServer stability and QA: Citrix invests considerable resources in testing the stability of XenServer.\n    Significant modifications to dom0 are likely to have unpredictable effects on the performance of the product, particularly if they are resource-hungry.    Supportability: the XenServer control domain is well-known to Citrix support teams.\n    If it is heavily modified, dom0 becomes very difficult to identify whether the cause of the problem is a component of XenServer, or due to a supplemental pack.\n    In many cases, customers may be asked to reproduce the problem on an unmodified version of XenServer, which can cause customer dissatisfaction with the organization whose pack has been installed.\n    Similarly, when a pack author is asked to debug a problem perceived to be with their pack, having the majority of the components of the pack in an appliance VM of known/static configuration can significantly ease diagnosis.    Resource starvation: dom0 is limited in memory and processing power.\n    If resource-hungry processes are installed by a supplemental pack, resource starvation can occur.\n    This can impact both XenServer stability and the correct functioning of the supplemental pack.\n    Note that Citrix does not advise increasing the number of dom0 vCPUs.    Security: XenServer dom0 is designed to ensure the security of the hosts that it is installed on to.\n    Any security issues found in software that is installed into dom0 can mean that the host is open to compromise.\n    Hence, the smaller the quantity of software installed into dom0 by a pack, the lower the likelihood that XenServer hosts will be compromised due to a flaw in the software of the pack.    Partners often ask whether supplemental packs can include heavy-weight software, such as the Java runtime environment, or a web server.\nThis type of component is not suitable for inclusion in dom0, and should instead be placed in an appliance VM.\nIn many cases, the functionality that is desired can be achieved using such an appliance VM, in conjunction with the Xen API.\nCitrix can provide advice to partners in such cases.", 
            "title": "What should (not) be in a supplemental pack?"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\nThis chapter describes how to setup a base XenServer system, running a DDK Virtual Machine (VM), for examining the examples provided in this document, and for use in the development of supplemental packs.\nPartners who wish to construct supplemental packs as part of their own build systems should consult the appropriate section, later in this document.\n\n\nThe high-level process of setting up a DDK VM to create a supplemental pack is:\n\n\n\n\n\n\nObtain matching XenServer product and DDK build ISOs.\n\n\n\n\n\n\nInstall XenServer onto a host server.\n\n\n\n\n\n\nInstall the XenCenter administrator console onto a Windows-based machine.\n\n\n\n\n\n\nUse XenCenter to import the DDK onto the XenServer host as a new virtual machine.\n\n\n\n\n\n\nInstalling XenServer\n\n\nInstalling XenServer only requires booting from the CD-ROM image, and answering a few basic questions.\nAfter setup completes, take note of the host IP address shown, as it is required for connection from XenCenter.\n\n\n\n\nNote\n\n\nIntel VT or AMD-V CPU support is required to run Windows guests, but is not required in order to use the DDK, nor for testing drivers in the XenServer control domain (dom0).\n\n\n\n\nInstalling XenCenter\n\n\nXenCenter, the XenServer administration console, must be installed on a separate Windows-based machine.\nInserting the XenServer installation CD will run the XenCenter installer automatically.\nOnce installed, the XenCenter console will be displayed with no servers connected.\n\n\nConnect XenCenter to the XenServer host\n\n\nWithin XenCenter select the \nServer \n Add\n menu option and supply the appropriate host name/IP address and password for the XenServer host.\n\n\nSelect the newly connected host in the left-hand tree view.\n\n\nImporting the DDK VM through XenCenter\n\n\n\n\nNote\n\n\nYou can also import the DDK directly on the host using the \nxe\n Command Line Interface (CLI).\n\n\n\n\n\n\n\n\nInsert the DDK CD into the CD-ROM drive of the machine running XenCenter.\n\n\n\n\n\n\nOn the \nVM\n menu, select the \nImport\n option. The VM Import Wizard is displayed.\n\n\n\n\n\n\nClick \nBrowse\n and on the \nFiles of type\n drop-down list, select \nXenServer Virtual Appliance Version 1 (ova.xml)\n.\n\n\n\n\n\n\nNavigate to the DDK CD-ROM and select the ova.xml file within the DDK directory.\n\n\n\n\n\n\nClick \nNext\n to use the defaults on the Home Server and Storage pages.\n\n\n\n\n\n\nOn the Network page, add a virtual network interface to the VM.\n\n\n\n\n\n\nFinish the VM Import Wizard.\n\n\n\n\n\n\nThe DDK VM will be started automatically.\n\n\nImporting the DDK VM using the CLI\n\n\nThe DDK VM can also be imported directly on the XenServer host using the xe CLI and standard Linux commands to mount the DDK ISO.\n\n\n\n\n\n\nMount the DDK ISO and import the DDK VM:\n\n\nbash\nmkdir -p /mnt/tmp\nmount \npath_to_DDK_ISO\n/ddk.iso /mnt/tmp \u2013o loop,ro\nxe vm-import filename=/mnt/tmp/ddk/ova.xml\n\n\nThe universally unique identifier (UUID) of the DDK VM is returned when the import completes.\n\n\n\n\n\n\nAdd a virtual network interface to the DDK VM:\n\n\nbash\nxe network-list\n\n\nNote the UUID of the appropriate network to use with the DDK VM, typically this will be the network with a \nname-label\n of \nPool-wide network associated with eth0\n.\n\n\nbash\nxe vif-create network-uuid=\nnetwork_uuid\n vm-uuid=\nddk_vm_uuid\n\u00a0device=0\n\n\n\n\nNote\n\n\nUse tab completion to avoid entering more than the first couple of characters of the UUIDs.\n\n\n\n\n\n\n\n\nStart the DDK VM:\n\n\nbash\nxe vm-start uuid=\nddk_vm_uuid\n\n\n\n\n\n\nUsing the DDK VM\n\n\nSelect the DDK VM in the left pane and then select the Console tab in the right pane to display the console of the DDK VM to provide a terminal window in which you can work.\n\n\nThe DDK VM is Linux-based so you are free to use other methods such as ssh to access the DDK VM. You can also access the DDK VM console directly from the host console.\n\n\nAdding Extra Packages to the DDK VM\n\n\nThe DDK is built to be as close as possible to the XenServer control domain (Dom0).\nThis means that only a small number of extra packages are present in the DDK (to enable the compilation of kernel modules) as compared to Dom0.\nIn some cases, partners who wish to use the DDK as a build environment may wish to add extra packages (e.g. NIS authentication) to the DDK.\n\n\nBecause the DDK (and Dom0) are based on CentOS, any package that is available for that distribution can be installed into the DDK, using the Yum package manager.\nHowever, it is necessary to explicitly enable the CentOS repositories to allow such installation.\nPackage installation must therefore be carried out using the command:\n\n\nyum install \npackageName\n\n\n\n\n\n\nAccessing the DDK VM console from the host console\n\n\nThe DDK VM text console can be accessed directly from the XenServer host console instead of using XenCenter.\nNote that using this method disables access to the DDK console from XenCenter.\n\n\n\n\n\n\nWhile the DDK VM is shut down, disable VNC access on the VM record:\n\n\nxe vm-param-set uuid=\nddk_vm_uuid\n other-config:disable_pv_vnc=1\n\n\n\n\n\n\n\n\n\nStart the VM\n\n\nxe vm-start uuid=\nddk_vm_uuid\n\n\n\n\n\n\n\n\n\n\nRetrieve the underlying domain ID of the VM:\n\n\nxe vm-list params=dom-id uuid=\nddk_vm_uuid\n --minimal\n\n\n\n\n\n\n\n\n\nConnect to the VM text console:\n\n\n/usr/lib/xen/bin/xenconsole \ndom-id\n\n\n\n\n\n\n\n\n\n\nWhen complete, exit the xenconsole session using \nCTRL-]\n\n\n\n\n\n\nFor more information on using with the xe CLI please see the \nXenServer Administrator's Guide\n, available online.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "This chapter describes how to setup a base XenServer system, running a DDK Virtual Machine (VM), for examining the examples provided in this document, and for use in the development of supplemental packs.\nPartners who wish to construct supplemental packs as part of their own build systems should consult the appropriate section, later in this document.  The high-level process of setting up a DDK VM to create a supplemental pack is:    Obtain matching XenServer product and DDK build ISOs.    Install XenServer onto a host server.    Install the XenCenter administrator console onto a Windows-based machine.    Use XenCenter to import the DDK onto the XenServer host as a new virtual machine.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installing-xenserver", 
            "text": "Installing XenServer only requires booting from the CD-ROM image, and answering a few basic questions.\nAfter setup completes, take note of the host IP address shown, as it is required for connection from XenCenter.   Note  Intel VT or AMD-V CPU support is required to run Windows guests, but is not required in order to use the DDK, nor for testing drivers in the XenServer control domain (dom0).", 
            "title": "Installing XenServer"
        }, 
        {
            "location": "/getting-started/#installing-xencenter", 
            "text": "XenCenter, the XenServer administration console, must be installed on a separate Windows-based machine.\nInserting the XenServer installation CD will run the XenCenter installer automatically.\nOnce installed, the XenCenter console will be displayed with no servers connected.", 
            "title": "Installing XenCenter"
        }, 
        {
            "location": "/getting-started/#connect-xencenter-to-the-xenserver-host", 
            "text": "Within XenCenter select the  Server   Add  menu option and supply the appropriate host name/IP address and password for the XenServer host.  Select the newly connected host in the left-hand tree view.", 
            "title": "Connect XenCenter to the XenServer host"
        }, 
        {
            "location": "/getting-started/#importing-the-ddk-vm-through-xencenter", 
            "text": "Note  You can also import the DDK directly on the host using the  xe  Command Line Interface (CLI).     Insert the DDK CD into the CD-ROM drive of the machine running XenCenter.    On the  VM  menu, select the  Import  option. The VM Import Wizard is displayed.    Click  Browse  and on the  Files of type  drop-down list, select  XenServer Virtual Appliance Version 1 (ova.xml) .    Navigate to the DDK CD-ROM and select the ova.xml file within the DDK directory.    Click  Next  to use the defaults on the Home Server and Storage pages.    On the Network page, add a virtual network interface to the VM.    Finish the VM Import Wizard.    The DDK VM will be started automatically.", 
            "title": "Importing the DDK VM through XenCenter"
        }, 
        {
            "location": "/getting-started/#importing-the-ddk-vm-using-the-cli", 
            "text": "The DDK VM can also be imported directly on the XenServer host using the xe CLI and standard Linux commands to mount the DDK ISO.    Mount the DDK ISO and import the DDK VM:  bash\nmkdir -p /mnt/tmp\nmount  path_to_DDK_ISO /ddk.iso /mnt/tmp \u2013o loop,ro\nxe vm-import filename=/mnt/tmp/ddk/ova.xml  The universally unique identifier (UUID) of the DDK VM is returned when the import completes.    Add a virtual network interface to the DDK VM:  bash\nxe network-list  Note the UUID of the appropriate network to use with the DDK VM, typically this will be the network with a  name-label  of  Pool-wide network associated with eth0 .  bash\nxe vif-create network-uuid= network_uuid  vm-uuid= ddk_vm_uuid \u00a0device=0   Note  Use tab completion to avoid entering more than the first couple of characters of the UUIDs.     Start the DDK VM:  bash\nxe vm-start uuid= ddk_vm_uuid", 
            "title": "Importing the DDK VM using the CLI"
        }, 
        {
            "location": "/getting-started/#using-the-ddk-vm", 
            "text": "Select the DDK VM in the left pane and then select the Console tab in the right pane to display the console of the DDK VM to provide a terminal window in which you can work.  The DDK VM is Linux-based so you are free to use other methods such as ssh to access the DDK VM. You can also access the DDK VM console directly from the host console.", 
            "title": "Using the DDK VM"
        }, 
        {
            "location": "/getting-started/#adding-extra-packages-to-the-ddk-vm", 
            "text": "The DDK is built to be as close as possible to the XenServer control domain (Dom0).\nThis means that only a small number of extra packages are present in the DDK (to enable the compilation of kernel modules) as compared to Dom0.\nIn some cases, partners who wish to use the DDK as a build environment may wish to add extra packages (e.g. NIS authentication) to the DDK.  Because the DDK (and Dom0) are based on CentOS, any package that is available for that distribution can be installed into the DDK, using the Yum package manager.\nHowever, it is necessary to explicitly enable the CentOS repositories to allow such installation.\nPackage installation must therefore be carried out using the command:  yum install  packageName", 
            "title": "Adding Extra Packages to the DDK VM"
        }, 
        {
            "location": "/getting-started/#accessing-the-ddk-vm-console-from-the-host-console", 
            "text": "The DDK VM text console can be accessed directly from the XenServer host console instead of using XenCenter.\nNote that using this method disables access to the DDK console from XenCenter.    While the DDK VM is shut down, disable VNC access on the VM record:  xe vm-param-set uuid= ddk_vm_uuid  other-config:disable_pv_vnc=1    Start the VM  xe vm-start uuid= ddk_vm_uuid     Retrieve the underlying domain ID of the VM:  xe vm-list params=dom-id uuid= ddk_vm_uuid  --minimal    Connect to the VM text console:  /usr/lib/xen/bin/xenconsole  dom-id     When complete, exit the xenconsole session using  CTRL-]    For more information on using with the xe CLI please see the  XenServer Administrator's Guide , available online.", 
            "title": "Accessing the DDK VM console from the host console"
        }, 
        {
            "location": "/building-example-packs/", 
            "text": "Building the example packs\n\n\nTo make the process of building an Update package as easy as possible, we have included a number of examples in the Driver Development Kit (DDK), which Citrix makes available to our partners with each build.\n\n\nImport the DDK onto the XenServer host.\nRefer to the instructions described in \n/root/examples/README.txt\n, which outlines the example scripts for generating GPG test keys as well as the various configuration options for generating a pack.\n\n\nFor most cases, copying the example build files and customizing them with pack specific information should be sufficient.\n\n\nPack UUIDs\n: Each pack will have a UUID included in the metadata, which is required to build an Update package.\nThe UUID must be unique to the Update being generating:\n\n\n\n\n\n\nThe same UUID should not refer to different Updates.\n\n\n\n\n\n\nThe same Update should not have multiple UUIDs.\n\n\n\n\n\n\nA number of examples are supplied in the DDK under \n/root/examples\n.\nThese include:\n\n\n\n\n\n\nUserspace\n: a simple example of a pack containing only programs and files that relate to a userspace.\n\n\n\n\n\n\nDriver\n: a simple kernel driver.\n\n\n\n\n\n\nCombined\n: an example which contains kernel and userspace files.\n\n\n\n\n\n\nThere are specific rules for packaging kernel device drivers.\nFor more information, see \nRules and guidelines\n.\n\n\nWithin each directory there is a:\n\n\n\n\n\n\nSource tree\n: a directory containing a collection of files.\n\n\n\n\n\n\nSpecification file\n: a file that describes how to build an RPM.\n\n\n\n\n\n\nMakefile\n: a file used to automate the creation of a supplemental pack.\n\n\n\n\n\n\nTo build a specific example, use the following commands:\n\n\ncd /root/example/\ndir\n\nmake\n\n\n\n\n\nThis will result in the following files being created:\n\n\n\n\npack\n.iso\n - the supplemental pack CD image.\n\n\n\n\nWhere \npack\n is the name of the pack.\n\n\nTest Signing Key Generation\n\n\nWhen the first example pack is built, a new GnuPG key pair is created.\nYou will be prompted for a passphrase that must be entered whenever the\nprivate key is used to sign a pack. This key pair is only intended for\ndeveloper testing. See --- for information on generating the key pair to\nuse for released Supplemental packs.\n\n\nTo allow partners to release software that is installable in Dom0,\nCitrix requires partners provide us with the public key corresponding to\ntheir GPG key pair generated with the following requirements:\n\n\n\n\n\n\nASD Type = RSA\n\n\n\n\n\n\nBits = 2048\n\n\n\n\n\n\nExpiry date = preferably none, else \n10 years.\n\n\n\n\n\n\nNo support for subkeys as RPM does not handle this properly.\n\n\n\n\n\n\nNaming convention: RPM-GPG-KEY-\nVENDOR\n\n\n\n\n\n\nInstalling the Test Key\n\n\nBefore a pack that has been signed with a test key can be installed on\nany XenServer hosts, the public key must be imported into the host on\nwhich the pack should be installed.\n\n\n\n\n\n\nCopy the public key from the DDK VM to the host using the following\n    command:\n\n\n DDK# scp /root/RPM-GPG-KEY-DDK-Test root@XenServer:\n\n\n\n\n\n\n\n\n\nImport the key on the host using the following command:\n\n\n XS# /opt/xensource/debug/import-update-key RPM-GPG-KEY-DDK-Test\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTo allow developer testing, a script is now included in Dom0 that enables our partners to import an update key manually:\n\n\nbash\n/opt/xensource/debug/import-update-key \nPATH-TO-KEY-FILE", 
            "title": "Building the example packs"
        }, 
        {
            "location": "/building-example-packs/#building-the-example-packs", 
            "text": "To make the process of building an Update package as easy as possible, we have included a number of examples in the Driver Development Kit (DDK), which Citrix makes available to our partners with each build.  Import the DDK onto the XenServer host.\nRefer to the instructions described in  /root/examples/README.txt , which outlines the example scripts for generating GPG test keys as well as the various configuration options for generating a pack.  For most cases, copying the example build files and customizing them with pack specific information should be sufficient.  Pack UUIDs : Each pack will have a UUID included in the metadata, which is required to build an Update package.\nThe UUID must be unique to the Update being generating:    The same UUID should not refer to different Updates.    The same Update should not have multiple UUIDs.    A number of examples are supplied in the DDK under  /root/examples .\nThese include:    Userspace : a simple example of a pack containing only programs and files that relate to a userspace.    Driver : a simple kernel driver.    Combined : an example which contains kernel and userspace files.    There are specific rules for packaging kernel device drivers.\nFor more information, see  Rules and guidelines .  Within each directory there is a:    Source tree : a directory containing a collection of files.    Specification file : a file that describes how to build an RPM.    Makefile : a file used to automate the creation of a supplemental pack.    To build a specific example, use the following commands:  cd /root/example/ dir \nmake  This will result in the following files being created:   pack .iso  - the supplemental pack CD image.   Where  pack  is the name of the pack.", 
            "title": "Building the example packs"
        }, 
        {
            "location": "/building-example-packs/#test-signing-key-generation", 
            "text": "When the first example pack is built, a new GnuPG key pair is created.\nYou will be prompted for a passphrase that must be entered whenever the\nprivate key is used to sign a pack. This key pair is only intended for\ndeveloper testing. See --- for information on generating the key pair to\nuse for released Supplemental packs.  To allow partners to release software that is installable in Dom0,\nCitrix requires partners provide us with the public key corresponding to\ntheir GPG key pair generated with the following requirements:    ASD Type = RSA    Bits = 2048    Expiry date = preferably none, else  10 years.    No support for subkeys as RPM does not handle this properly.    Naming convention: RPM-GPG-KEY- VENDOR", 
            "title": "Test Signing Key Generation"
        }, 
        {
            "location": "/building-example-packs/#installing-the-test-key", 
            "text": "Before a pack that has been signed with a test key can be installed on\nany XenServer hosts, the public key must be imported into the host on\nwhich the pack should be installed.    Copy the public key from the DDK VM to the host using the following\n    command:   DDK# scp /root/RPM-GPG-KEY-DDK-Test root@XenServer:    Import the key on the host using the following command:   XS# /opt/xensource/debug/import-update-key RPM-GPG-KEY-DDK-Test     Note  To allow developer testing, a script is now included in Dom0 that enables our partners to import an update key manually:  bash\n/opt/xensource/debug/import-update-key  PATH-TO-KEY-FILE", 
            "title": "Installing the Test Key"
        }, 
        {
            "location": "/installing-packs/", 
            "text": "Installing supplemental packs\n\n\nYou can install a supplemental pack at the same time as installing XenServer or you can install a supplemental pack on a running XenServer instance.\n\n\nAt installation time\n\n\nYou can install supplemental packs while installing XenServer on a host in one of two ways:\n\n\n\n\n\n\nFrom a CD \u2013 during an interactive installation from local media you will be asked if you want to install any supplemental packs.\n    Any number of packs can be installed in succession.\n\n\n\n\n\n\nFrom a Network repository \u2013 a HTTP, FTP or NFS repository can be expanded to include one or more supplemental packs.\n    See the XenServer Installation Guide for instructions on how to extract a supplemental pack to a directory.\n\n\n\n\n\n\nIf a driver needs to be loaded from a supplemental pack before the XenServer installation can proceed (for example, to support a new RAID\ncontroller), the user should press the F9 key when prompted by the installer.\nThe media containing the supplemental pack/driver disk can then be provided, and the installer will attempt to load the new driver.\n\n\nThe XenServer installer will allow the user to choose to verify a pack before it is installed.\nThe installer will check the contents of the pack against internal checksums produced when the pack was created.\n\n\nOn a running host\n\n\nInstall a supplemental pack by using XenCenter or the xe CLI.\n\n\nUsing XenCenter\n\n\nTo install a supplemental pack using XenCenter:\n\n\n\n\n\n\nDownload the supplemental pack (\nfilename.iso\n) to a known location on your computer.\n    Supplemental packs are available to download from the XenServer downloads page.\n\n\n\n\n\n\nFrom the XenCenter menu, select \nTools\n and then \nInstall Update\n.\n\n\n\n\n\n\nRead the information on the \nBefore You Start\n page and then select \nNext\n to continue\n\n\n\n\n\n\nOn the \nSelect Update\n page, click \nAdd\n to add the supplemental pack.\n\n\n\n\n\n\nOn the \nSelect Servers\n page, select the XenServer host or the pool to which you would like to apply the supplemental pack and then click \nNext\n.\n    This uploads the supplemental pack to the host or the pool\u2019s default SR.\n\n\n\n\nNote\n\n\nIf the default SR in a pool is not shared, or does not have enough space, XenCenter tries to upload the supplemental pack to another shared SR with sufficient space.\nIf none of the shared SRs have sufficient space, the supplemental pack will be uploaded to each host's local storage.\n\n\n\n\n\n\n\n\nThe \nUpload\n page displays the status of the upload.\n    If there is not enough space on the SR, an error will be displayed.\n    Click \nMore Info\n for details and take necessary action to free up the space required for the upload.\n\n\n\n\n\n\nAfter the file is successfully uploaded, XenCenter performs a series of prechecks to determine whether the supplemental pack can be applied onto the selected servers and displays the result.\n    Follow the on-screen recommendations to resolve any update prechecks that have failed.\n    If you would like XenCenter to automatically resolve all failed prechecks, click \nResolve All\n.\n\n\n\n\n\n\nChoose the \nUpdate Mode\n. Review the information displayed on the screen and select an appropriate mode.\n    If you click \nCancel\n at this stage, the \nInstall Update\n wizard will revert the changes and removes the supplemental pack from the SR.\n\n\n\n\n\n\nClick \nInstall update\n to proceed with the installation.\n    The \nInstall Update\n wizard shows the progress of the update, displaying the major operations that XenCenter performs while updating each host in the pool.\n\n\n\n\n\n\nWhen the supplemental pack has been installed, click \nFinish\n to close the wizard.\n\n\n\n\n\n\nUsing CLI\n\n\nA Supplemental Pack can be installed remotely using the xe CLI.\n\n\n\n\n\n\nUpload the update:\n\n\n xe update-upload file-name=\npack.iso\n\n\n\n\n\n\n\n\nNote\n\n\nThe UUID of the pack is returned when the upload completes.\n\n\n\n\n\n\n\n\nApply the pack:\n\n\n xe update-apply uuid=\npack_uuid\n\n\n\n\n\n\nA pack can also be installed on the XenServer host by running the following command:\n\n\n xe-install-supplemental-pack \npack.iso\n\n\n\n\n\n\nExample syntax for applying an Update package via the CLI:\n\n\n# xe update-upload file-name=test-hotfix-basic-1.iso\n320232df-7adb-4cbe-a7a3-8515240879e1\n# xe update-apply uuid=320232df-7adb-4cbe-a7a3-8515240879e1\n# xe update-list\n\nuuid ( RO): 320232df-7adb-4cbe-a7a3-8515240879e1\nname-label ( RO): test-hotfix-basic-1\nname-description ( RO): Simple basic hotfix with a single package, no guidance\ninstallation-size ( RO): 32\nhosts (SRO): 4fab6121-ea56-4c27-b4e3-b02aac6c2e28\nafter-apply-guidance (SRO):\n\n\n\n\n\n\n\n\n\nDriver-specific considerations\n\n\nThe XenServer installer, when booted, loads kernel modules that are appropriate to the hardware it has detected.\nIf the newer version of a driver is needed in order for the installation to proceed, then the installer version of the module must be unloaded, and the new driver\nloaded from a supplemental pack/driver disk.\nThe procedure for this is as follows:\n\n\n\n\n\n\nReboot the host, leaving the XenServer installation CD-ROM in the drive.\n\n\n\n\n\n\nAt the \nboot:\n prompt, type:\n\n\nshell\n\n\n\n\n\n\n\n\n\nYou will now be presented with a command prompt. Type the following:\n\n\nrmmod \ndriver-name\n\n\n\n\n\n\nWhere \ndriver-name\n is the name of the driver to be replaced.\nIf this command succeeds (that is, if there are no error messages printed), the installer version of the driver has been unloaded.\nIf error messages are presented, it is likely that other drivers depend on the driver you are attempting to unload.\nIf this is the case, please contact Citrix support.\n\n\n\n\n\n\nType\n\n\nexit\n\n\n\n\n\nor press Control+D on your keyboard, to return to the installer.\n\n\n\n\n\n\nIn the installer, press the F9 key when prompted to provide the driver disk, which should now load correctly.", 
            "title": "Installing supplemental packs"
        }, 
        {
            "location": "/installing-packs/#installing-supplemental-packs", 
            "text": "You can install a supplemental pack at the same time as installing XenServer or you can install a supplemental pack on a running XenServer instance.", 
            "title": "Installing supplemental packs"
        }, 
        {
            "location": "/installing-packs/#at-installation-time", 
            "text": "You can install supplemental packs while installing XenServer on a host in one of two ways:    From a CD \u2013 during an interactive installation from local media you will be asked if you want to install any supplemental packs.\n    Any number of packs can be installed in succession.    From a Network repository \u2013 a HTTP, FTP or NFS repository can be expanded to include one or more supplemental packs.\n    See the XenServer Installation Guide for instructions on how to extract a supplemental pack to a directory.    If a driver needs to be loaded from a supplemental pack before the XenServer installation can proceed (for example, to support a new RAID\ncontroller), the user should press the F9 key when prompted by the installer.\nThe media containing the supplemental pack/driver disk can then be provided, and the installer will attempt to load the new driver.  The XenServer installer will allow the user to choose to verify a pack before it is installed.\nThe installer will check the contents of the pack against internal checksums produced when the pack was created.", 
            "title": "At installation time"
        }, 
        {
            "location": "/installing-packs/#on-a-running-host", 
            "text": "Install a supplemental pack by using XenCenter or the xe CLI.", 
            "title": "On a running host"
        }, 
        {
            "location": "/installing-packs/#using-xencenter", 
            "text": "To install a supplemental pack using XenCenter:    Download the supplemental pack ( filename.iso ) to a known location on your computer.\n    Supplemental packs are available to download from the XenServer downloads page.    From the XenCenter menu, select  Tools  and then  Install Update .    Read the information on the  Before You Start  page and then select  Next  to continue    On the  Select Update  page, click  Add  to add the supplemental pack.    On the  Select Servers  page, select the XenServer host or the pool to which you would like to apply the supplemental pack and then click  Next .\n    This uploads the supplemental pack to the host or the pool\u2019s default SR.   Note  If the default SR in a pool is not shared, or does not have enough space, XenCenter tries to upload the supplemental pack to another shared SR with sufficient space.\nIf none of the shared SRs have sufficient space, the supplemental pack will be uploaded to each host's local storage.     The  Upload  page displays the status of the upload.\n    If there is not enough space on the SR, an error will be displayed.\n    Click  More Info  for details and take necessary action to free up the space required for the upload.    After the file is successfully uploaded, XenCenter performs a series of prechecks to determine whether the supplemental pack can be applied onto the selected servers and displays the result.\n    Follow the on-screen recommendations to resolve any update prechecks that have failed.\n    If you would like XenCenter to automatically resolve all failed prechecks, click  Resolve All .    Choose the  Update Mode . Review the information displayed on the screen and select an appropriate mode.\n    If you click  Cancel  at this stage, the  Install Update  wizard will revert the changes and removes the supplemental pack from the SR.    Click  Install update  to proceed with the installation.\n    The  Install Update  wizard shows the progress of the update, displaying the major operations that XenCenter performs while updating each host in the pool.    When the supplemental pack has been installed, click  Finish  to close the wizard.", 
            "title": "Using XenCenter"
        }, 
        {
            "location": "/installing-packs/#using-cli", 
            "text": "A Supplemental Pack can be installed remotely using the xe CLI.    Upload the update:   xe update-upload file-name= pack.iso    Note  The UUID of the pack is returned when the upload completes.     Apply the pack:   xe update-apply uuid= pack_uuid   A pack can also be installed on the XenServer host by running the following command:   xe-install-supplemental-pack  pack.iso   Example syntax for applying an Update package via the CLI:  # xe update-upload file-name=test-hotfix-basic-1.iso\n320232df-7adb-4cbe-a7a3-8515240879e1\n# xe update-apply uuid=320232df-7adb-4cbe-a7a3-8515240879e1\n# xe update-list\n\nuuid ( RO): 320232df-7adb-4cbe-a7a3-8515240879e1\nname-label ( RO): test-hotfix-basic-1\nname-description ( RO): Simple basic hotfix with a single package, no guidance\ninstallation-size ( RO): 32\nhosts (SRO): 4fab6121-ea56-4c27-b4e3-b02aac6c2e28\nafter-apply-guidance (SRO):", 
            "title": "Using CLI"
        }, 
        {
            "location": "/installing-packs/#driver-specific-considerations", 
            "text": "The XenServer installer, when booted, loads kernel modules that are appropriate to the hardware it has detected.\nIf the newer version of a driver is needed in order for the installation to proceed, then the installer version of the module must be unloaded, and the new driver\nloaded from a supplemental pack/driver disk.\nThe procedure for this is as follows:    Reboot the host, leaving the XenServer installation CD-ROM in the drive.    At the  boot:  prompt, type:  shell    You will now be presented with a command prompt. Type the following:  rmmod  driver-name   Where  driver-name  is the name of the driver to be replaced.\nIf this command succeeds (that is, if there are no error messages printed), the installer version of the driver has been unloaded.\nIf error messages are presented, it is likely that other drivers depend on the driver you are attempting to unload.\nIf this is the case, please contact Citrix support.    Type  exit  or press Control+D on your keyboard, to return to the installer.    In the installer, press the F9 key when prompted to provide the driver disk, which should now load correctly.", 
            "title": "Driver-specific considerations"
        }, 
        {
            "location": "/producing-rpms/", 
            "text": "Producing driver RPMs\n\n\nIn order to produce a supplemental pack that contains kernel modules\n(drivers), the DDK must be used to compile the driver(s) from their\nsource code, against the XenServer kernel. This chapter describes the\nprocess.\n\n\nDirectory structure\n\n\nAlthough the examples located in the \n/root/examples/\n directory contain various subdirectories, in practice, most supplemental pack authors will not use this structure.\nThe following example considers a supplemental pack that contains both kernel modules and userspace components (as the \ncombined\n example does).\n\n\nIn the \ncombined\n case, two RPMs will be created, one containing the kernel modules, and the other the \"data\" or userspace portions (configuration files, firmware,  modprobe rules).\nHence, two specification files are present, which specify the contents of each RPM that is to be created.\n\n\nThe kernel driver source code should be placed in the \n/root/rpmbuild/SOURCES/\n directory as a tar archive (may be gzipped or bzip2 compressed), whose name should be of the format \nmodule-name\n-\nmodule-version\n.\nMeanwhile, the specification files for the RPMs to be created will be stored in a directory elsewhere.\nCitrix recommends authors make a copy of the specification files and Makefile found in the \nexamples/combined/\n directory as a starting point.\nThe Makefile contains various useful build targets that can be adjusted for the kernel module sources being used.\n\n\nAll non-kernel module components should be placed in a directory named \nmodule-name\n-data-\nversion\n, for example, \nhelloworld-data-1.0\n.\nThe corresponding specification file would be \nhelloworld-data.spec\n.\nIt is suggested that this subdirectory be placed in the same directory as the specification files.\n\n\nMakefile variables\n\n\nThe Makefile includes several metadata attributes which must be customized according to the contents of the pack. These are as follows:\n\n\n\n\n\n\nSPEC\n: the specification file for the driver RPM.\n\n\n\n\n\n\nDATA_SPEC\n: the specification file for the userspace components RPM.\n\n\n\n\n\n\nLABEL\n: by default, taken from the \"Name:\" field of the driver RPM specification file, but can be edited if so desired.\n\n\n\n\n\n\nTEXT\n: a free text field describing the function of the driver. This is displayed on installation.\n\n\n\n\n\n\nUUID\n: a universal unique identifier generated by the UUIDgen command.\n    Every pack must have a different UUID and a given pack should have the same UUID each time it is built.\n\n\n\n\n\n\nPACK_VERSION\n: the version number of the pack (this defaults to the build of the DDK being used, but should be changed by pack authors).\n\n\n\n\n\n\nPACK_BUILD\n: the build number of the pack (this defaults to the build of the DDK being used, but should be changed by pack authors).\n\n\n\n\n\n\nRPM_VERSION\n: the version number to be used for the kernel modules RPM. Citrix advises authors to set this to the version of the driver source being used.\n\n\n\n\n\n\nRPM_RELEASE\n: the release number of this version of the RPM. For example, the same version of driver might be re-released in a supplemental pack, and hence need a new release number.\n\n\n\n\n\n\nDATA_RPM_VERSION\n: the version number to be used for the userspace RPM.\n\n\n\n\n\n\nDATA_RPM_RELEASE\n: the release number to be used for the userspace RPM.\n\n\n\n\n\n\nCreating the kernel module specification file\n\n\nThe kernel module packages are built according to the instructions in the specification file.\nThe following sections of the specification file affect the building of a package and should be set to appropriate values:\n\n\n\n\n\n\nName\n: a unique ID, preferably the name of the kernel module.\n\n\n\n\n\n\nSource\n: the exact filename (without the path) of the tar archive that contains the sources for the kernel module, expected to be of the form \nmodule-name\n-\nmodule-version\n.\n\n\n\n\n\n\nSummary\n: a short description of the driver.\n\n\n\n\n\n\n%files\n is a list of files that are to be compiled into the RPM.\n    Kernel modules must be located in a directory named \nextra\n (within \n/lib/modules/\nkernel-version\n/\n).\n\n\n\n\n\n\n%changelog\n describes changes that have been made to the driver.\n\n\n\n\n\n\nBuilding the modules\n\n\nEach kernel module RPM must be built against against the XenServer kernel headers.\nThe example Makefile provides a \nbuild-rpms\n target that automates the build.\nThe userspace RPM is also built if necessary.\nThe RPMs are output into the \n/root/rpmbuild/RPMS/x86_64\n directory.\n\n\nIf the RPM does not build, it is important that the following be checked:\n\n\n\n\n\n\nThe \nSource\n parameter of the kernel RPM specification file \nmust\n be the filename of the compressed tar archive containing the source code for the module, located in \n/root/rpmbuild/SOURCES\n.\n\n\n\n\n\n\nThe \n%prep\n section of the example specification file relies on the compressed tar archive, when expanded, creating a directory named \nmodule-name\n-\nmodule-version\n.     If this is not the case, (for example, if it creates a directory named \nmodule-version\n), the \n%setup -q -n\n step can be amended to be, for example, \n%setup -q -n %{version}\n.\n\n\n\n\n\n\nThe \n%build\n section of the example specification file relies on the directory \n/root/rpmbuild/SOURCES/\nmodule-name\n-\nmodule-version\n/\n containing the Makefile or KMake file that will build the kernel module \nmodule-name\n.\n    If this Makefile is in a subdirectory, the \n%build\n section will need a \ncd \nsubdirectory-name\n step added to it, before the \n%{__make}\n step. Similarly, you will need to add the same step into the \n%install\n section.\n\n\n\n\n\n\nIf, for any reason, the Makefile included in the compressed tar archive needs to be heavily patched in order to work correctly with the DDK, Citrix suggests that a new version of the file be created, with the appropriate fixes, then a patch generated using the \ndiff\n command.\n    This patch can then be applied in the \n%prep\n section of the specification file, immediately following the \n%setup\n step.\n\n\n\n\n\n\nIf the kernel module itself fails to compile, (rather than the RPMs failing to build), it may be that the source being used is incompatible with the kernel version that is used in XenServer.\n    In this case, the author of the driver should be contacted.\n\n\n\n\n\n\nIncluding driver RPMs in supplemental packs\n\n\nThe next chapter details exactly how to include not only driver RPMs produced in the above manner in a supplemental pack, but also any other arbitrary RPMs.\nIf a pack is only to include driver RPMs plus some associated configuration or firmware, it can be produced directly by using the Makefile \n$(ISO)\n target, which runs the \nbuild-update\n script.\nThe script is run with the appropriate arguments to include the metadata that was given in the Makefile.\n\n\nFormat for releasing drivers\n\n\nIf a supplemental pack contains drivers, it must also be shipped with the source code to those drivers, to fulfill obligations under the GNU General Public License (GPL).\nCitrix recommends that pack authors create a zip file containing the pack ISO, a compressed archive of any relevant source code, and the MD5 checksum files that are associated with the pack metadata and the ISO, produced by \nbuild-update\n.\n\n\nReleasing multiple drivers in a single pack-\n\n\nServer hardware manufacturers may wish to issue a single supplemental pack that contains multiple drivers.\nThree options are available, depending on the desired result:\n\n\n\n\n\n\nMake individual copies of the \n/root/examples/driver\n directory, one for each driver.\n    Then produce the two RPMs for each driver using the \nbuild\n target in the \nMakefile\n.\n    Collect all the RPMs into one place, and then run \nbuild-supplemental-pack.sh\n.\n\n\n\n\n\n\nCreate a specification file for each driver (similar to that in \n/root/examples/driver\n).\n    Adjust the \nMakefile\n to compile all the drivers and produce RPMs for each one, and then run \nbuild-supplemental-pack.sh\n.", 
            "title": "Producing driver RPMs"
        }, 
        {
            "location": "/producing-rpms/#producing-driver-rpms", 
            "text": "In order to produce a supplemental pack that contains kernel modules\n(drivers), the DDK must be used to compile the driver(s) from their\nsource code, against the XenServer kernel. This chapter describes the\nprocess.", 
            "title": "Producing driver RPMs"
        }, 
        {
            "location": "/producing-rpms/#directory-structure", 
            "text": "Although the examples located in the  /root/examples/  directory contain various subdirectories, in practice, most supplemental pack authors will not use this structure.\nThe following example considers a supplemental pack that contains both kernel modules and userspace components (as the  combined  example does).  In the  combined  case, two RPMs will be created, one containing the kernel modules, and the other the \"data\" or userspace portions (configuration files, firmware,  modprobe rules).\nHence, two specification files are present, which specify the contents of each RPM that is to be created.  The kernel driver source code should be placed in the  /root/rpmbuild/SOURCES/  directory as a tar archive (may be gzipped or bzip2 compressed), whose name should be of the format  module-name - module-version .\nMeanwhile, the specification files for the RPMs to be created will be stored in a directory elsewhere.\nCitrix recommends authors make a copy of the specification files and Makefile found in the  examples/combined/  directory as a starting point.\nThe Makefile contains various useful build targets that can be adjusted for the kernel module sources being used.  All non-kernel module components should be placed in a directory named  module-name -data- version , for example,  helloworld-data-1.0 .\nThe corresponding specification file would be  helloworld-data.spec .\nIt is suggested that this subdirectory be placed in the same directory as the specification files.", 
            "title": "Directory structure"
        }, 
        {
            "location": "/producing-rpms/#makefile-variables", 
            "text": "The Makefile includes several metadata attributes which must be customized according to the contents of the pack. These are as follows:    SPEC : the specification file for the driver RPM.    DATA_SPEC : the specification file for the userspace components RPM.    LABEL : by default, taken from the \"Name:\" field of the driver RPM specification file, but can be edited if so desired.    TEXT : a free text field describing the function of the driver. This is displayed on installation.    UUID : a universal unique identifier generated by the UUIDgen command.\n    Every pack must have a different UUID and a given pack should have the same UUID each time it is built.    PACK_VERSION : the version number of the pack (this defaults to the build of the DDK being used, but should be changed by pack authors).    PACK_BUILD : the build number of the pack (this defaults to the build of the DDK being used, but should be changed by pack authors).    RPM_VERSION : the version number to be used for the kernel modules RPM. Citrix advises authors to set this to the version of the driver source being used.    RPM_RELEASE : the release number of this version of the RPM. For example, the same version of driver might be re-released in a supplemental pack, and hence need a new release number.    DATA_RPM_VERSION : the version number to be used for the userspace RPM.    DATA_RPM_RELEASE : the release number to be used for the userspace RPM.", 
            "title": "Makefile variables"
        }, 
        {
            "location": "/producing-rpms/#creating-the-kernel-module-specification-file", 
            "text": "The kernel module packages are built according to the instructions in the specification file.\nThe following sections of the specification file affect the building of a package and should be set to appropriate values:    Name : a unique ID, preferably the name of the kernel module.    Source : the exact filename (without the path) of the tar archive that contains the sources for the kernel module, expected to be of the form  module-name - module-version .    Summary : a short description of the driver.    %files  is a list of files that are to be compiled into the RPM.\n    Kernel modules must be located in a directory named  extra  (within  /lib/modules/ kernel-version / ).    %changelog  describes changes that have been made to the driver.", 
            "title": "Creating the kernel module specification file"
        }, 
        {
            "location": "/producing-rpms/#building-the-modules", 
            "text": "Each kernel module RPM must be built against against the XenServer kernel headers.\nThe example Makefile provides a  build-rpms  target that automates the build.\nThe userspace RPM is also built if necessary.\nThe RPMs are output into the  /root/rpmbuild/RPMS/x86_64  directory.  If the RPM does not build, it is important that the following be checked:    The  Source  parameter of the kernel RPM specification file  must  be the filename of the compressed tar archive containing the source code for the module, located in  /root/rpmbuild/SOURCES .    The  %prep  section of the example specification file relies on the compressed tar archive, when expanded, creating a directory named  module-name - module-version .     If this is not the case, (for example, if it creates a directory named  module-version ), the  %setup -q -n  step can be amended to be, for example,  %setup -q -n %{version} .    The  %build  section of the example specification file relies on the directory  /root/rpmbuild/SOURCES/ module-name - module-version /  containing the Makefile or KMake file that will build the kernel module  module-name .\n    If this Makefile is in a subdirectory, the  %build  section will need a  cd  subdirectory-name  step added to it, before the  %{__make}  step. Similarly, you will need to add the same step into the  %install  section.    If, for any reason, the Makefile included in the compressed tar archive needs to be heavily patched in order to work correctly with the DDK, Citrix suggests that a new version of the file be created, with the appropriate fixes, then a patch generated using the  diff  command.\n    This patch can then be applied in the  %prep  section of the specification file, immediately following the  %setup  step.    If the kernel module itself fails to compile, (rather than the RPMs failing to build), it may be that the source being used is incompatible with the kernel version that is used in XenServer.\n    In this case, the author of the driver should be contacted.", 
            "title": "Building the modules"
        }, 
        {
            "location": "/producing-rpms/#including-driver-rpms-in-supplemental-packs", 
            "text": "The next chapter details exactly how to include not only driver RPMs produced in the above manner in a supplemental pack, but also any other arbitrary RPMs.\nIf a pack is only to include driver RPMs plus some associated configuration or firmware, it can be produced directly by using the Makefile  $(ISO)  target, which runs the  build-update  script.\nThe script is run with the appropriate arguments to include the metadata that was given in the Makefile.", 
            "title": "Including driver RPMs in supplemental packs"
        }, 
        {
            "location": "/producing-rpms/#format-for-releasing-drivers", 
            "text": "If a supplemental pack contains drivers, it must also be shipped with the source code to those drivers, to fulfill obligations under the GNU General Public License (GPL).\nCitrix recommends that pack authors create a zip file containing the pack ISO, a compressed archive of any relevant source code, and the MD5 checksum files that are associated with the pack metadata and the ISO, produced by  build-update .", 
            "title": "Format for releasing drivers"
        }, 
        {
            "location": "/producing-rpms/#releasing-multiple-drivers-in-a-single-pack-", 
            "text": "Server hardware manufacturers may wish to issue a single supplemental pack that contains multiple drivers.\nThree options are available, depending on the desired result:    Make individual copies of the  /root/examples/driver  directory, one for each driver.\n    Then produce the two RPMs for each driver using the  build  target in the  Makefile .\n    Collect all the RPMs into one place, and then run  build-supplemental-pack.sh .    Create a specification file for each driver (similar to that in  /root/examples/driver ).\n    Adjust the  Makefile  to compile all the drivers and produce RPMs for each one, and then run  build-supplemental-pack.sh .", 
            "title": "Releasing multiple drivers in a single pack-"
        }, 
        {
            "location": "/creating-a-pack/", 
            "text": "Creating a supplemental pack\n\n\nSupplemental packs can be created containing existing RPMs provided they meet the requirements given below.\nIf standard packages that are not shipped in XenServer are to be included, these should be from the appropriate CentOS distribution that the XenServer dom0 is based upon.\nIn XenServer 7.3, this is CentOS 7.2. Alternatively, components can packaged as RPMs using a custom spec file.\n\n\nIf a pack will only contain drivers, it is normally known as a XenServer Driver Disk.\nHowever, the mechanisms used to build and install a driver disk are the same as for any other supplemental pack.\nOne key point is that for drivers, the source code must be provided to the DDK, in order that the drivers be compiled for the correct kernels.\nFor other pack components, no such compilation is necessary.\n\n\nSyntax of build-update\n\n\nAll supplemental packs are constructed using the \n/usr/bin/build-update\n script.\nThis provides a simple way to provide metadata about the pack, by taking a number of options and arguments.\nThe significance of each one is discussed in the sections that follow.\n\n\nApart from the metadata switches, any further arguments to \nbuild-update\n are taken to be names of the RPMs to be included in the supplemental pack.\n\n\nName, vendor, and version information\n\n\nBasic details concerning the pack authoring organization, name, and version number must be provided. The relevant switches are:\n\n\n\n\n\n\n--uuid\n: a universal unique identifier generated by the \nuuidgen\n command.\n\n\n\n\n\n\n--label\n: an identifier that identifies the pack.\n\n\n\n\n\n\n--text\n: a free text string describing the pack (enclosed by double quote marks).\n\n\n\n\n\n\n--version\n: the pack version (likely to be of the form 1.2.3).\n\n\n\n\n\n\nDeclaring Pack dependencies\n\n\nSupplemental Packs should describe the version of XenServer to which they are compatible. This is done using the \n--base-requires\n switch:\n\n\n --base-requires \u201cproduct-version=x.x.x\u201d\n\n\n\n\n\nA brief example\n\n\nAs an illustration of how \nbuild-update\n works, pack authors can create an example pack by placing all constituent RPMs in a directory:\n\n\nmkdir packages\ncd packages\ncp /root/rpmbuild/RPMS/x86_64/helloworld-1.0-1.x86_64.rpm .\n\n\n\n\n\nThe pack metadata is then created, using the script.\n\n\nbuild-update --uuid 3fbce6cf-5cd2-4d32-9602-e8122c562169 --label example pack --version 1.0.0 \\\n--description \nAn Example Pack\n --base-requires \nproduct version=7.3.0\n \\\n--key \nExample Updates (update) \nexample@example.com\n --keyfile /root/RPM-GPG-KEY-XS-DDK-TEST \\\n-o example.iso *.rpm\n\n\n\n\n\nA CD image should then be made from the contents of this directory.\n\n\nAdding files to Server Status Reports\n\n\nXenServer provides a convenient mechanism for users to collect a variety of debugging information when opening a support case, known as a Server Status Report in XenCenter, or \nxen-bugtool\n on the CLI.\nTo aid partners in supporting their supplemental packs, it is recommended that pack authors add to the list of files collected as part of these Status Reports, using the method outlined below.\n\n\nServer Status Reports can include not only files, such as logs, but also the outputs of any normal scripts or commands that are run in the control domain (dom0).\nFor convenience, the items collected as part of a Report are divided into categories.\nFor example, the Network Configuration category collects the output of tools such as \nifconfig\n, as well as network configuration files.\nCitrix recommends that pack authors create new categories if appropriate, but also consider adding to existing categories.\n\n\nAs an example, partner Acmesoft, who produce software that manages the configuration of a special network card, might wish to create a category called Acmesoft, under which various Acmesoft-specific log files are collected.\nHowever, they might also wish to add (other) files related to networking to the Network Configuration category, as it makes most sense from a user perspective that they be collected as part of this category.\n\n\nEach category has a level of confidentiality attached to it, which expresses how much personally identifiable information (PII) might be present in the files that are collected as part of that capability.\nThis ensures that users are made aware before they send Status Reports to support teams of what they might be disclosing.\nThere are four levels of confidentiality: no PII, possibly some PII if the file to be collected has been customized, possibly contains some PII, and definitely contains\nPII.\n\n\nExtending an existing category\n\n\nTo extend an existing category, an XML file should be created in \n/etc/xensource/bugtool/\ncategory\n/\n directory (where \ncategory\n is the category name).\nThree elements within an outer \ncollect\n element will be supported:\n\n\n\n\n\n\nfiles\n: a list of one or more files (separated by spaces, hence no spaces are allowed within the file names).\n\n\n\n\n\n\ndirectory\n: a directory to be collected, with (optionally) a pattern that will be used to filter objects within.\n    The pattern must be a valid Python regular expression.\n    The \nnegate\n attribute allows the sense of the pattern to be inverted: this attribute is provided for ease of readability purposes, as negation could also be included\n    in the regular expression itself.\n\n\n\n\n\n\ncommand\n: a command to be executed and its output collected.\n    The optional \nlabel\n attribute specifies a name for the output file.\n    If this is not specified, the command name will be used.\n\n\n\n\n\n\nFor example:\n\n\n    \ncollect\n\n      \nfiles\nfile1 file2\n/files\n\n      \ndirectory\n \npattern=\n.*\\.txt$\n \nnegate=\nfalse\ndir\n/directory\n\n      \ncommand\n \nlabel=\nlabel\ncmd\n/command\n\n    \n/collect\n\n\n\n\n\n\n\n\nNote\n\n\nWhen extending existing categories, any files added should have the same (or lower) confidentiality levels as the category in question.\n\n\n\n\nExisting categories are:\n\n\n\n\n\n\n\n\nCategory name\n\n\nDescription\n\n\nPII level\n\n\nCollected by default?\n\n\n\n\n\n\n\n\n\n\nCVSM\n\n\nCitrix StorageLink configuration\n\n\nNo\n\n\nYes\n\n\n\n\n\n\ndisk-info\n\n\nDisk information\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nfirstboot\n\n\nFirst-boot scripts\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nhardware-info\n\n\nHardware information\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nhigh-availability\n\n\nHigh availability\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nhost-crashdump-dumps\n\n\nCrash dump files\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nhost-crashdump-logs\n\n\nCrash dump logs\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nkernel-info\n\n\nKernel information\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nloopback-devices\n\n\nLoopback devices\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nmultipath\n\n\nMultipathing configuration\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nnetwork-status\n\n\nNetwork scripts\n\n\nIf customized\n\n\nYes\n\n\n\n\n\n\npam\n\n\nAuthentication module configuration\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nprocess-list\n\n\nProcess listing\n\n\nYes\n\n\nYes\n\n\n\n\n\n\npersistent-stats\n\n\nPersistent statistics\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nsystem-logs\n\n\nSystem logs\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nsystem-services\n\n\nSystem services\n\n\nNo\n\n\nYes\n\n\n\n\n\n\ntapdisk-logs\n\n\nStorage subsystem logs\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nvncterm\n\n\nVNCTerm crash dumps\n\n\nMaybe\n\n\nNo\n\n\n\n\n\n\nwlb\n\n\nWorkload Balancing status\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nXYes1\n\n\nX server logs\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nXYes1-auth\n\n\nX11 authority\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nxapi-subprocess\n\n\nXenServer daemon subprocesses\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nXenServer-config\n\n\nXenServer configuration\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nXenServer-domains\n\n\nXenServer domains list\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nXenServer-databases\n\n\nXenServer database\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nXenServer-install\n\n\nXenServer installation log files\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nXenServer-logs\n\n\nXenServer logs\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nxen-info\n\n\nHypervisor configuration\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nxha-liveset\n\n\nHigh availability liveset\n\n\nMaybe\n\n\nYes\n\n\n\n\n\n\nyum\n\n\nRPM package database\n\n\nIf customized\n\n\nYes\n\n\n\n\n\n\n\n\nA number of other categories exist: these are purely for development and test purposes, and should therefore not be extended by supplemental packs.\n\n\nAdding new categories\n\n\nTo add a new category, an XML file should be created with the name \n/etc/xensource/bugtool/\ncategory\n.xml\n (where \ncategory\n is the new category name).\nIt should contain a single \ncapability\n element, with the following optional attributes:\n\n\n\n\n\n\npii\n: the degree of confidentiality that is inherent in the files to be collected (personally identifiable information).\n    This must be set to one of \nno\n (no PII), \nif_customized\n (PII would only be present if the file has been customized by the user), \nmaybe\n (PII may be present in this file), or \nyes\n (there is a very high likelihood of PII being present).\n\n\n\n\n\n\nmin_size\n: the minimum size (in bytes) of the data collected by this category.\n\n\n\n\n\n\nmax_size\n: the maximum size (in bytes) of the data collected by this category.\n\n\n\n\n\n\nmin_time\n: the minimum time (in seconds) that the commands are expected to take to run to completion.\n\n\n\n\n\n\nmax_time\n: the maximum time (in seconds) that the commands are expected to take to run to completion.\n\n\n\n\n\n\nmime\n: the MIME type of the data to be collected. This must be one of \napplication/data\n or \ntext/plain\n.\n\n\n\n\n\n\nchecked\n: specifies whether this category is to be collected by default (set to \ntrue\n) or not (set to \nfalse\n).\n\n\n\n\n\n\nhidden\n: when set to \ntrue\n, this category will only be collected if explicitly requested on the CLI. It will not be visible in XenCenter.\n\n\n\n\n\n\n\n\nNote\n\n\nIf the data to be collected by a capability exceeds the constraints placed upon it (that is, the maximum size of data to be collected is higher than \nmax_size\n), then the data is \nnot\n collected. The \nmin_size\n and \nmin_time\n attributes are purely for user information: if the amount of data collected, or time taken for its collection, is less than these attributes, the data \nis\n collected.\n\n\n\n\nThe data to be collected as part of this category should be specified by one or more XML files located in the \n/etc/xensource/bugtool/\ncategory\n/\n directory, as described in the previous section.\n\n\nAt present, XenCenter displays any new categories that are added by supplemental packs, but does not provide a mechanism for pack authors to give descriptions of them in the Server Status Report dialogue.\nPack authors should therefore ensure that any new categories have suitably descriptive names.\n\n\nAutomating pack installation at XenServer installation time\n\n\nIf a partner has obtained the necessary agreement from Citrix to distribute XenServer, it is possible to create a modified installation ISO that contains the XenServer installation files, plus one or more supplemental packs.\nThis allows a partner to distribute a single ISO that can seamlessly install XenServer and the supplemental pack(s).\nThere are two steps to this process: the first involves combining the installation ISO with the pack ISO; the second requires an answerfile to be created.\n\n\nIncluding an answerfile on the XenServer installation ISO\n\n\nAnswerfiles allow the responses to all the questions posed by the XenServer installer to be specified in an XML file, rather than needing to run the installer in interactive mode.\nThe XenServer DDK includes a script to add an answerfile to the XenServer main installation ISO, to allow installation to be carried out in an unattended fashion.\nThe \n/usr/local/bin/rebuild-iso.sh\n script can be used within the DDK (though the default root disk size within the DDK is unlikely to be sufficient to perform the necessary ISO re-packing operations, and hence network storage is recommended).\nAlternatively, the script, plus \n/usr/local/bin/rebuild.functions\n, can be copied to an external machine that has \nmkisofs\n installed, and used there.\n\n\nThe \nrebuild-iso.sh\n script takes in the XenServer installation ISO, plus the files to be added to it, and outputs a combined ISO. Its syntax is:\n\n\nrebuild-iso.sh\n       [--answerfile=\nanswerfile\n]\n       [--include=\nfile\n|\ndirectory\n]\n       [--label=\nISOLabel\n]\n       inputFile.iso outputFile.iso\n\n\n\n\n\nThe \nanswerfile\n must be a valid XenServer automated installation file.\nDetails of the syntax of this file are given in the relevant section of the XenServer Installation Guide.\nAs part of an answerfile, it is possible to specify scripts that may be run directly after the installation completes.\nWhilst such scripts can be on a web server, it is also possible to place them on the ISO, with the answerfile.\nThe \n--include\n switch allows such files to be added to the ISO output by \nrebuild-iso.sh\n. Finally, the \n--label\n switch controls what the volume label of the resulting ISO should be.\nIf no label is specified, the label of the input ISO is used.\n\n\nIt is worth noting that whilst an answerfile specifies the answers to\ninstallation questions such as keyboard layout and target disks, it does\nnot specify which repositories to install from. This is because for an\nautomated installation, all repositories specified in the\n\nXS-REPOSITORY-LIST\n file are installed. Therefore, provided that all\nsupplemental packs that are to be installed are included in the\n\nXS-REPOSITORY-LIST\n file, they will be installed automatically directly\nfollowing the installation of XenServer itself.", 
            "title": "Creating a supplemental pack"
        }, 
        {
            "location": "/creating-a-pack/#creating-a-supplemental-pack", 
            "text": "Supplemental packs can be created containing existing RPMs provided they meet the requirements given below.\nIf standard packages that are not shipped in XenServer are to be included, these should be from the appropriate CentOS distribution that the XenServer dom0 is based upon.\nIn XenServer 7.3, this is CentOS 7.2. Alternatively, components can packaged as RPMs using a custom spec file.  If a pack will only contain drivers, it is normally known as a XenServer Driver Disk.\nHowever, the mechanisms used to build and install a driver disk are the same as for any other supplemental pack.\nOne key point is that for drivers, the source code must be provided to the DDK, in order that the drivers be compiled for the correct kernels.\nFor other pack components, no such compilation is necessary.", 
            "title": "Creating a supplemental pack"
        }, 
        {
            "location": "/creating-a-pack/#syntax-of-build-update", 
            "text": "All supplemental packs are constructed using the  /usr/bin/build-update  script.\nThis provides a simple way to provide metadata about the pack, by taking a number of options and arguments.\nThe significance of each one is discussed in the sections that follow.  Apart from the metadata switches, any further arguments to  build-update  are taken to be names of the RPMs to be included in the supplemental pack.", 
            "title": "Syntax of build-update"
        }, 
        {
            "location": "/creating-a-pack/#name-vendor-and-version-information", 
            "text": "Basic details concerning the pack authoring organization, name, and version number must be provided. The relevant switches are:    --uuid : a universal unique identifier generated by the  uuidgen  command.    --label : an identifier that identifies the pack.    --text : a free text string describing the pack (enclosed by double quote marks).    --version : the pack version (likely to be of the form 1.2.3).", 
            "title": "Name, vendor, and version information"
        }, 
        {
            "location": "/creating-a-pack/#declaring-pack-dependencies", 
            "text": "Supplemental Packs should describe the version of XenServer to which they are compatible. This is done using the  --base-requires  switch:   --base-requires \u201cproduct-version=x.x.x\u201d", 
            "title": "Declaring Pack dependencies"
        }, 
        {
            "location": "/creating-a-pack/#a-brief-example", 
            "text": "As an illustration of how  build-update  works, pack authors can create an example pack by placing all constituent RPMs in a directory:  mkdir packages\ncd packages\ncp /root/rpmbuild/RPMS/x86_64/helloworld-1.0-1.x86_64.rpm .  The pack metadata is then created, using the script.  build-update --uuid 3fbce6cf-5cd2-4d32-9602-e8122c562169 --label example pack --version 1.0.0 \\\n--description  An Example Pack  --base-requires  product version=7.3.0  \\\n--key  Example Updates (update)  example@example.com  --keyfile /root/RPM-GPG-KEY-XS-DDK-TEST \\\n-o example.iso *.rpm  A CD image should then be made from the contents of this directory.", 
            "title": "A brief example"
        }, 
        {
            "location": "/creating-a-pack/#adding-files-to-server-status-reports", 
            "text": "XenServer provides a convenient mechanism for users to collect a variety of debugging information when opening a support case, known as a Server Status Report in XenCenter, or  xen-bugtool  on the CLI.\nTo aid partners in supporting their supplemental packs, it is recommended that pack authors add to the list of files collected as part of these Status Reports, using the method outlined below.  Server Status Reports can include not only files, such as logs, but also the outputs of any normal scripts or commands that are run in the control domain (dom0).\nFor convenience, the items collected as part of a Report are divided into categories.\nFor example, the Network Configuration category collects the output of tools such as  ifconfig , as well as network configuration files.\nCitrix recommends that pack authors create new categories if appropriate, but also consider adding to existing categories.  As an example, partner Acmesoft, who produce software that manages the configuration of a special network card, might wish to create a category called Acmesoft, under which various Acmesoft-specific log files are collected.\nHowever, they might also wish to add (other) files related to networking to the Network Configuration category, as it makes most sense from a user perspective that they be collected as part of this category.  Each category has a level of confidentiality attached to it, which expresses how much personally identifiable information (PII) might be present in the files that are collected as part of that capability.\nThis ensures that users are made aware before they send Status Reports to support teams of what they might be disclosing.\nThere are four levels of confidentiality: no PII, possibly some PII if the file to be collected has been customized, possibly contains some PII, and definitely contains\nPII.", 
            "title": "Adding files to Server Status Reports"
        }, 
        {
            "location": "/creating-a-pack/#extending-an-existing-category", 
            "text": "To extend an existing category, an XML file should be created in  /etc/xensource/bugtool/ category /  directory (where  category  is the category name).\nThree elements within an outer  collect  element will be supported:    files : a list of one or more files (separated by spaces, hence no spaces are allowed within the file names).    directory : a directory to be collected, with (optionally) a pattern that will be used to filter objects within.\n    The pattern must be a valid Python regular expression.\n    The  negate  attribute allows the sense of the pattern to be inverted: this attribute is provided for ease of readability purposes, as negation could also be included\n    in the regular expression itself.    command : a command to be executed and its output collected.\n    The optional  label  attribute specifies a name for the output file.\n    If this is not specified, the command name will be used.    For example:       collect \n       files file1 file2 /files \n       directory   pattern= .*\\.txt$   negate= false dir /directory \n       command   label= label cmd /command \n     /collect    Note  When extending existing categories, any files added should have the same (or lower) confidentiality levels as the category in question.   Existing categories are:     Category name  Description  PII level  Collected by default?      CVSM  Citrix StorageLink configuration  No  Yes    disk-info  Disk information  Maybe  Yes    firstboot  First-boot scripts  Yes  Yes    hardware-info  Hardware information  Maybe  Yes    high-availability  High availability  Maybe  Yes    host-crashdump-dumps  Crash dump files  Yes  No    host-crashdump-logs  Crash dump logs  No  No    kernel-info  Kernel information  Maybe  Yes    loopback-devices  Loopback devices  Maybe  Yes    multipath  Multipathing configuration  Maybe  Yes    network-status  Network scripts  If customized  Yes    pam  Authentication module configuration  No  Yes    process-list  Process listing  Yes  Yes    persistent-stats  Persistent statistics  Maybe  Yes    system-logs  System logs  Maybe  Yes    system-services  System services  No  Yes    tapdisk-logs  Storage subsystem logs  No  No    vncterm  VNCTerm crash dumps  Maybe  No    wlb  Workload Balancing status  No  Yes    XYes1  X server logs  No  Yes    XYes1-auth  X11 authority  No  Yes    xapi-subprocess  XenServer daemon subprocesses  No  Yes    XenServer-config  XenServer configuration  Maybe  Yes    XenServer-domains  XenServer domains list  No  Yes    XenServer-databases  XenServer database  Yes  Yes    XenServer-install  XenServer installation log files  Maybe  Yes    XenServer-logs  XenServer logs  Maybe  Yes    xen-info  Hypervisor configuration  Maybe  Yes    xha-liveset  High availability liveset  Maybe  Yes    yum  RPM package database  If customized  Yes     A number of other categories exist: these are purely for development and test purposes, and should therefore not be extended by supplemental packs.", 
            "title": "Extending an existing category"
        }, 
        {
            "location": "/creating-a-pack/#adding-new-categories", 
            "text": "To add a new category, an XML file should be created with the name  /etc/xensource/bugtool/ category .xml  (where  category  is the new category name).\nIt should contain a single  capability  element, with the following optional attributes:    pii : the degree of confidentiality that is inherent in the files to be collected (personally identifiable information).\n    This must be set to one of  no  (no PII),  if_customized  (PII would only be present if the file has been customized by the user),  maybe  (PII may be present in this file), or  yes  (there is a very high likelihood of PII being present).    min_size : the minimum size (in bytes) of the data collected by this category.    max_size : the maximum size (in bytes) of the data collected by this category.    min_time : the minimum time (in seconds) that the commands are expected to take to run to completion.    max_time : the maximum time (in seconds) that the commands are expected to take to run to completion.    mime : the MIME type of the data to be collected. This must be one of  application/data  or  text/plain .    checked : specifies whether this category is to be collected by default (set to  true ) or not (set to  false ).    hidden : when set to  true , this category will only be collected if explicitly requested on the CLI. It will not be visible in XenCenter.     Note  If the data to be collected by a capability exceeds the constraints placed upon it (that is, the maximum size of data to be collected is higher than  max_size ), then the data is  not  collected. The  min_size  and  min_time  attributes are purely for user information: if the amount of data collected, or time taken for its collection, is less than these attributes, the data  is  collected.   The data to be collected as part of this category should be specified by one or more XML files located in the  /etc/xensource/bugtool/ category /  directory, as described in the previous section.  At present, XenCenter displays any new categories that are added by supplemental packs, but does not provide a mechanism for pack authors to give descriptions of them in the Server Status Report dialogue.\nPack authors should therefore ensure that any new categories have suitably descriptive names.", 
            "title": "Adding new categories"
        }, 
        {
            "location": "/creating-a-pack/#automating-pack-installation-at-xenserver-installation-time", 
            "text": "If a partner has obtained the necessary agreement from Citrix to distribute XenServer, it is possible to create a modified installation ISO that contains the XenServer installation files, plus one or more supplemental packs.\nThis allows a partner to distribute a single ISO that can seamlessly install XenServer and the supplemental pack(s).\nThere are two steps to this process: the first involves combining the installation ISO with the pack ISO; the second requires an answerfile to be created.", 
            "title": "Automating pack installation at XenServer installation time"
        }, 
        {
            "location": "/creating-a-pack/#including-an-answerfile-on-the-xenserver-installation-iso", 
            "text": "Answerfiles allow the responses to all the questions posed by the XenServer installer to be specified in an XML file, rather than needing to run the installer in interactive mode.\nThe XenServer DDK includes a script to add an answerfile to the XenServer main installation ISO, to allow installation to be carried out in an unattended fashion.\nThe  /usr/local/bin/rebuild-iso.sh  script can be used within the DDK (though the default root disk size within the DDK is unlikely to be sufficient to perform the necessary ISO re-packing operations, and hence network storage is recommended).\nAlternatively, the script, plus  /usr/local/bin/rebuild.functions , can be copied to an external machine that has  mkisofs  installed, and used there.  The  rebuild-iso.sh  script takes in the XenServer installation ISO, plus the files to be added to it, and outputs a combined ISO. Its syntax is:  rebuild-iso.sh\n       [--answerfile= answerfile ]\n       [--include= file | directory ]\n       [--label= ISOLabel ]\n       inputFile.iso outputFile.iso  The  answerfile  must be a valid XenServer automated installation file.\nDetails of the syntax of this file are given in the relevant section of the XenServer Installation Guide.\nAs part of an answerfile, it is possible to specify scripts that may be run directly after the installation completes.\nWhilst such scripts can be on a web server, it is also possible to place them on the ISO, with the answerfile.\nThe  --include  switch allows such files to be added to the ISO output by  rebuild-iso.sh . Finally, the  --label  switch controls what the volume label of the resulting ISO should be.\nIf no label is specified, the label of the input ISO is used.  It is worth noting that whilst an answerfile specifies the answers to\ninstallation questions such as keyboard layout and target disks, it does\nnot specify which repositories to install from. This is because for an\nautomated installation, all repositories specified in the XS-REPOSITORY-LIST  file are installed. Therefore, provided that all\nsupplemental packs that are to be installed are included in the XS-REPOSITORY-LIST  file, they will be installed automatically directly\nfollowing the installation of XenServer itself.", 
            "title": "Including an answerfile on the XenServer installation ISO"
        }, 
        {
            "location": "/rules-and-guidelines/", 
            "text": "Rules and guidelines\n\n\nKernel modules\n\n\nKernel modules must be built and packaged according to the following:\n\n\n\n\n\n\nModules must be placed in an RPM.\n\n\n\n\n\n\nAll modules must be located under the directory\n    \n/lib/modules/\nkernel\n/updates\n where \nkernel\n is the\n    version of the kernel.\n\n\n\n\n\n\nTo ensure a pack is fully conformant, Citrix recommends basing it on one\nof the examples in the DDK.\n\n\n\n\nNote\n\n\nThe XenServer build into which a kernel module (driver) is installed \nmust\n be the identical build to the DDK that was used to build the pack in which the driver is contained.\nIf it is not, the resulting driver disk will not install on XenServer.\n\n\n\n\nPost-install scripts\n\n\nProvided they comply with the following constraints, RPMs may contain\nscripts that are invoked during installation. Such scripts might be\nnecessary in order to add appropriate firewall rules, or log rotation\nconfiguration, that is specific to the pack.\n\n\n\n\n\n\nScripts must not start processes.\n\n\n\n\n\n\nScripts must not assume that XenServer is booted and running (as it\n    may be that the pack is being installed as part of an initial\n    XenServer installation.\n\n\n\n\n\n\nIn the light of the previous point, if firewall rules are to be\n    added using a post-install script, the script \nmust\n execute\n    \niptables-restore \n /etc/sysconfig/iptables\n \nbefore\n\n    adding its own rules (using \niptables -A\n), and then\n    execute \niptables-save \n /etc/sysconfig/iptables\n. This\n    ensures that the default rules are loaded before the collection of\n    existing and new rules are saved. Failure to save the existing rules\n    will mean that when a pack is installed as part of a XenServer host\n    installation, the default XenServer firewall rules will be lost.\n\n\n\n\n\n\nIf an RPM needs to distinguish between a running host and an\ninstallation environment, the following code fragment may be used:\n\n\nif runlevel \n/dev/null 2\n1; then\n# running host\nelse\n# installation\nfi\n\n\n\n\n\nThe following types of file \nmust\n be placed in the appropriate\ndirectories:\n\n\n\n\n\n\nUdev rules: must be located in \n/etc/udev/rules.d/\n.\n\n\n\n\n\n\nFirmware: must be located in \n/lib/firmware/updates/\nkernel\n.\n\n\n\n\n\n\nConfiguration details: must be located in \n/etc/\n.\n\n\n\n\n\n\nDocumentation: must be located in \n/usr/share/doc/\n\n\n\n\n\n\nFirewall rules: must be added using \niptables -A\n, having \nfirst\n\n    executed\n    \niptables-save \n /etc/sysconfig/iptables\n\n    (see above).\n\n\n\n\n\n\nHandling upgrades\n\n\nOn upgrade, pack authors may wish to transfer configuration or state information from the previous installation: this section describes how such a transfer may be achieved.\n\n\nPack upgrade during a XenServer upgrade\n\n\nWhen a XenServer host is upgraded, the installer replaces the file system before supplemental packs are installed.\nThis affects the way individual RPMs interact with upgrades.\nTo enable configuration files (or other configuration data, such as databases) to be carried over, the installer makes the file system of the previous installation (which is automatically backed-up to another partition) available to the RPM scripts.\nThis is done through the \nXS_PREVIOUS_INSTALLATION\n environment variable.\n\n\nTherefore, in order to migrate state across upgrades, supplemental pack\nauthors must create a suitable script that runs as part of an RPM\ninstallation, and migrates the state. Specifically, the migration should\nbe from the old root file system pointed to by\n\nXS_PREVIOUS_INSTALLATION\n to the new file system mounted on \n/\n.\n\n\nFor an example of how this can be done, see the \n%post\n script in\n\nexamples/userspace/helloworld-user.spec\n.\n\n\nPack upgrade on an existing XenServer installation\n\n\nIt is expected that on each release of XenServer, supplemental pack\nauthors are likely to release new versions of their packs. However, if a\npack author releases an update between XenServer releases, existing\ninstallations of the old version of the pack would need to be upgraded.\nThis upgrade path is the responsibility of the pack author, as the\nlocation of the configuration data of the old version is on the root\nfile system, wherever the RPMs installed it to. The update installation\nprocess upgrades all RPMs contained within the pack, hence these RPMs\nshould be aware of how to deal with the existence of any relevant\nconfiguration files.\n\n\nUninstallation\n\n\nSupplemental Packs that only contain userspace packages may include a\nscript that removes the pack from a host.\n\n\n\n\n\n\nUninstalls the packages\n\n\n\n\n\n\nUninstalls other packages used to apply the pack\n\n\n\n\n\n\nCauses xapi to remove the pack from the database\n\n\n\n\n\n\nBuilding packs in existing build environments\n\n\nCitrix recognises that many partners have existing build systems that\nare used to produce the software that might be integrated into a\nsupplemental pack. To facilitate this, pack authors are \nnot\n required\nto make use of the Driver Development Kit VM, \nif\n they are producing\npacks that do \nnot\n contain drivers (as these need to be compiled for\nthe correct XenServer kernels).\n\n\nIf a pack author wishes to distribute drivers as part of a supplemental\npack, (or a pack consisting solely of drivers, commonly known as a\nDriver Disk), then the driver(s) will need to be compiled using the DDK.\nHowever, there is no barrier to pack authors including the driver disks\nthat are output by the DDK in their own build processes. Citrix does not\nsupport the compilation of drivers for XenServer in any way other than\nusing the DDK VM.\n\n\nTo build a supplemental pack (but not a driver) as part of an existing\nbuild process, the only package that is necessary from the Binary\nPackages ISO is \nupdate-package\n.\n\n\nThese can be used in any environment to create an appropriate pack.\nNote, however, that this environment must contain various tools that are\nnormally found in standard Linux distributions, including \ntar\n,\n\nmkisofs\n, \nsed\n, and \nrpm\n.\n\n\n\n\nWarning\n\n\nWhen integrating these scripts as part of another build system, pack authors should bear in mind that Citrix may update these scripts as new versions of XenServer are released.\nPack authors should ensure that they update this package from the new version of the DDK before building packs for the new version of XenServer.\n\n\n\n\nFor pack authors who wish to produce a supplemental pack as an output of\nanother build system, but who wish to include drivers, the following\nprocedure should be followed:\n\n\n\n\n\n\nCopy the driver source into a running DDK VM the corresponds to the\n    build of XenServer that the drivers will be targeted at.\n\n\n\n\n\n\nProduce driver \nRPMs\n (rather than a supplemental pack ISO). This\n    can be achieved using the \n$(RPM-FILE)\n rule in the standard\n    \nMakefile\n provided in the example packs.\n\n\n\n\n\n\nBy default, this command will output three driver RPMs into\n    \n/root/rpmbuild/RPMS/x86-64\n. Pack authors should ignore the\n    \ndebuginfo\n RPM, and take the other RPMs for inclusion in their\n    supplemental pack. These RPMs can be treated in the same way as any\n    other RPM to be shipped in the pack.\n\n\n\n\n\n\nThese RPMs should be provided to the non-DDK build system, for\n    inclusion in the finished pack. Evidently, this process assumes that\n    pack authors will be releasing new versions of their packs more\n    frequently than the XenServer kernel is changed, or that introducing\n    new versions of RPMs into the alternative build system is more\n    acceptable than introducing the DDK as the build system.\n\n\n\n\n\n\nPackaging driver firmware\n\n\nIt is increasingly common for hardware manufacturers to produce\ncomponents that load up-to-date firmware from the operating system that\nis running on the host machine. XenServer supports this mechanism, and\nfirmware packages should be installed to\n\n/lib/firmware/updates/\nkernel\n. The firmware should be packaged in an\nRPM, and included as part of a supplemental pack.\n\n\nVersioning\n\n\nSupplemental pack versioning\n\n\nAuthors of supplemental packs are free to use whatever version numbering\nscheme they feel is appropriate for their pack. Given that many packs\nare likely to include RPMs of existing software, it is suggested that\nthe pack version number correspond to the version of the software it\ncontains. For example, if an existing management console RPM is at\nversion 5, it is likely to be less confusing if the first version of the\nsupplemental pack that contains this RPM is also version 5.\n\n\nThere is no reason why, if it is simple enough, a pack should not be\nsuitable for multiple releases of XenServer \nprovided\n that it does not\ndepend on particular versions of other tools. In practice, Citrix is of\nthe opinion that packs should be re-released for each new version of\nXenServer, in order that they are also fully tested by the authors on\nthat new release. If a pack author chooses to release one pack for\nmultiple XenServer releases, they should ensure that the dependency\ninformation expressed in the metadata of the pack uses the \nge\n\ncomparator for the XenServer product, where the version to be compared\nagainst is the lowest supported version of XenServer.\n\n\nKernel module versioning\n\n\nEach kernel module is built against a specific kernel version. This\nkernel version is included in the RPM name to enable multiple instances\nto be installed. The version fields of a kernel module RPM are used to\ntrack changes to a driver for a single kernel version. Each time a\ndriver is released for a particular kernel, the RPM version must be\nincreased (as would be expected, given that there will have been changes\nmade to the driver sources).\n\n\nFor example:\n\n\nhelloworld-modules-xen-2.6.18-128.1.6.el5.xs5.5.0.502.1014-1.0-1.i386.rpm\ndriver name = helloworld\nkernel flavour = xen\nkernel version = 2.6.18-128.1.6.el5.xs5.5.0.502.1014\nRPM version = 1.0\nRPM build = 1\n\n\n\n\n\n\n\n\n\n\n\nXenServer Kernel version\n\n\nKernel module RPM version\n\n\nEvent\n\n\n\n\n\n\n\n\n\n\n2.6.18.128.1.5...\n\n\n1.0-1\n\n\nInitial release of pack\n\n\n\n\n\n\n2.6.18.128.1.5...\n\n\n1.1-1\n\n\nDriver bug fix\n\n\n\n\n\n\n2.6.27.37...\n\n\n2.0-1\n\n\nNew XenServer kernel, and new driver version\n\n\n\n\n\n\n\n\nTherefore, if a supplemental pack contains a driver, it will be\nnecessary to rebuild that driver for each update and major release of\nXenServer. Note that hotfixes do not normally change the kernel version,\nand hence the same driver can be used until a XenServer update (\"service\npack\") is released.\n\n\nAs a general rule, if a pack contains only a single driver, it is\nstrongly recommended that the version numbering of the pack be the same\nas that of the driver.\n\n\nPackages compiled by, but not in, XenServer\n\n\nSome of the packages that are included in the XenServer control domain\nare taken directly from the base Linux distribution, whilst others are\nmodified and re-compiled by Citrix. In some cases, certain source RPMs,\nwhen compiled, result in more than one binary RPM. There exist a variety\nof packages where XenServer includes some, but not all, of the resulting\nbinaries; for example, the \nnet-snmp\n package results in the binary\npackages \nnet-snmp\n and \nnet-snmp-utils\n, but \nnet-snmp-utils\n is not\nincluded in dom0.\n\n\nIf a supplemental pack author wishes to include a binary package that\nfalls into this category, that binary package will need to have the\ncorrect build number for the version of XenServer it is to be installed\nupon. Because Citrix re-compiles these packages, their build numbers\nwill have a XenServer-specific build number extension. Therefore, pack\nauthors will need to obtain these binary RPMs from Citrix.\n\n\nTo enable this process to be as simple as possible, Citrix produces an\nextra ISO (\nbinpkg.iso\n) for each release of XenServer that contains all\nthe packages that fall into this category. Partners should contact\nCitrix to obtain this ISO.\n\n\nRequirements for submission of drivers for inclusion in XenServer\n\n\nCitrix encourages hardware vendors to submit any driver disks released\nfor XenServer to Citrix in order that the drivers may be incorporated\ninto the next release of the product. In order to make this process as\nsimple as possible, vendors are requested to take note of the following\nrequirements:\n\n\n\n\n\n\nAny driver submitted must include its full source code, that is\n    available under an open source license compatible with the GNU\n    General Public License (GPL).\n\n\n\n\n\n\nAny binary firmware submitted must either be already publicly\n    available under a license allowing re-distribution, or the vendor\n    must have a current re-distribution agreement with Citrix.\n\n\n\n\n\n\nIf a new, (rather than an update to an existing) driver is being\n    submitted, Citrix will review it in order to confirm that it is\n    compatible with the current support statements made concerning\n    XenServer. It may be that a driver is rejected because it is\n    monolithic, or enables a feature which is not currently officially\n    supported. This may also be the case with radical changes made to\n    drivers that are already in the product. Partners who consider that\n    their driver(s) fall into this category should contact Citrix as\n    early as possible, in order that both organizations' engineering\n    teams are able to ascertain how to proceed.\n\n\n\n\n\n\nStrict time limits apply to submissions (see below). Vendors should\n    make their drivers available to Citrix as soon as possible, rather\n    than waiting until these deadlines, as testing may result in fixes\n    being required, which then need to be integrated into the product.\n\n\n\n\n\n\nCertain drivers are deemed critical to automated testing by Citrix\n    of XenServer. Any (entire-driver) updates to these drivers must be\n    provided a minimum of 6 weeks prior to the beta RTM date of the\n    release in which they are to be included. Partners whose drivers are\n    on this list will be informed of this constraint.\n\n\n\n\n\n\nAll other entire-driver updates (or new drivers) must be provided to\n    Citrix a minimum of 5 weeks prior to beta RTM.\n\n\n\n\n\n\nAny updates to drivers (for example, no new drivers) received after\n    these dates must be in the form of small, targeted fixes for\n    specific issues. Patches must be submitted that can be understood by\n    a reasonably experienced person, together with a description of the\n    flaw that particular patch addresses. Each fix should be in the form\n    of a separate patch, with an indication of what the flaw fixed is,\n    the effects the flaw would have if it is not addressed, and whether\n    such issues have already been seen by customers. Significant\n    additions of functionality, or very large patches will not be\n    accepted.\n\n\n\n\n\n\nClose to the RTM date of the beta of the release concerned, it is\n    unlikely that patches will be inserted into the beta release (though\n    they may be incorporated into the final release, if they are judged\n    to be of sufficient importance). Only in exceptional circumstances\n    will patches received fewer than 2 weeks prior to beta RTM be\n    incorporated into the beta. The preferred target for all driver\n    updates is the beta release, in order to achieve maximum testing\n    benefit.\n\n\n\n\n\n\nSubmitting a GPG Key: Once the key has been generated, when creating\n    the update pack, the name of the GPG key is baked into the Yum repo\n    metadata. This means the public key file cannot be renamed without\n    resigning the Update package.\n\n\nWhen the key-pair has been generated, export the public part (using\nASCI Armor) and create a ticket on \nCitrix Issue\nTracker\n to include it in the inbox.\n\n\n\n\n\n\nDoes XenServer already include a driver for my device?\n\n\nXenServer includes a wide variety of drivers, including many that are\ndistributed (inbox) with the kernel that dom0 is based upon. It may\ntherefore be the case that XenServer includes a driver that enables a\ndevice that is not present on the XenServer Hardware Compatibility List\n(HCL). This is particularly the case where a device is sold by multiple\ncompanies, each of which refers to it with a different name.\n\n\nBecause each driver included in XenServer includes information\nconcerning which PCI device IDs it claims, the simplest way to ascertain\nwhether a device is supported is to first find its device ID.\n\n\nIf the device is present in a running Linux-based system, the \nlspci -v\n\ncommand can be used, which will provide output which includes the\ninformation on all devices present in the host. If the \n-n\n switch is\ngiven, numeric IDs will be provided.\n\n\nIf only the name of the device is known, use the PCI ID database\n(\nhttp://pciids.sourceforge.net/pci.ids\n) to ascertain what the ID of\nthe device is. This database will also provide alternate names for the\ndevice, which may of use if the exact name is not listed in the\nXenServer HCL.\n\n\nIf the an alternate name for the device is not found on the HCL, then\neither the device has not been tested on XenServer, or a driver for it\nis not included in XenServer. To confirm whether a suitable driver is\nincluded, consult the list of PCI IDs the XenServer kernel supports,\nfound in \n/lib/modules/\nversion\n/modules.pcimap\n.", 
            "title": "Rules and Guidelines"
        }, 
        {
            "location": "/rules-and-guidelines/#rules-and-guidelines", 
            "text": "", 
            "title": "Rules and guidelines"
        }, 
        {
            "location": "/rules-and-guidelines/#kernel-modules", 
            "text": "Kernel modules must be built and packaged according to the following:    Modules must be placed in an RPM.    All modules must be located under the directory\n     /lib/modules/ kernel /updates  where  kernel  is the\n    version of the kernel.    To ensure a pack is fully conformant, Citrix recommends basing it on one\nof the examples in the DDK.   Note  The XenServer build into which a kernel module (driver) is installed  must  be the identical build to the DDK that was used to build the pack in which the driver is contained.\nIf it is not, the resulting driver disk will not install on XenServer.", 
            "title": "Kernel modules"
        }, 
        {
            "location": "/rules-and-guidelines/#post-install-scripts", 
            "text": "Provided they comply with the following constraints, RPMs may contain\nscripts that are invoked during installation. Such scripts might be\nnecessary in order to add appropriate firewall rules, or log rotation\nconfiguration, that is specific to the pack.    Scripts must not start processes.    Scripts must not assume that XenServer is booted and running (as it\n    may be that the pack is being installed as part of an initial\n    XenServer installation.    In the light of the previous point, if firewall rules are to be\n    added using a post-install script, the script  must  execute\n     iptables-restore   /etc/sysconfig/iptables   before \n    adding its own rules (using  iptables -A ), and then\n    execute  iptables-save   /etc/sysconfig/iptables . This\n    ensures that the default rules are loaded before the collection of\n    existing and new rules are saved. Failure to save the existing rules\n    will mean that when a pack is installed as part of a XenServer host\n    installation, the default XenServer firewall rules will be lost.    If an RPM needs to distinguish between a running host and an\ninstallation environment, the following code fragment may be used:  if runlevel  /dev/null 2 1; then\n# running host\nelse\n# installation\nfi  The following types of file  must  be placed in the appropriate\ndirectories:    Udev rules: must be located in  /etc/udev/rules.d/ .    Firmware: must be located in  /lib/firmware/updates/ kernel .    Configuration details: must be located in  /etc/ .    Documentation: must be located in  /usr/share/doc/    Firewall rules: must be added using  iptables -A , having  first \n    executed\n     iptables-save   /etc/sysconfig/iptables \n    (see above).", 
            "title": "Post-install scripts"
        }, 
        {
            "location": "/rules-and-guidelines/#handling-upgrades", 
            "text": "On upgrade, pack authors may wish to transfer configuration or state information from the previous installation: this section describes how such a transfer may be achieved.", 
            "title": "Handling upgrades"
        }, 
        {
            "location": "/rules-and-guidelines/#pack-upgrade-during-a-xenserver-upgrade", 
            "text": "When a XenServer host is upgraded, the installer replaces the file system before supplemental packs are installed.\nThis affects the way individual RPMs interact with upgrades.\nTo enable configuration files (or other configuration data, such as databases) to be carried over, the installer makes the file system of the previous installation (which is automatically backed-up to another partition) available to the RPM scripts.\nThis is done through the  XS_PREVIOUS_INSTALLATION  environment variable.  Therefore, in order to migrate state across upgrades, supplemental pack\nauthors must create a suitable script that runs as part of an RPM\ninstallation, and migrates the state. Specifically, the migration should\nbe from the old root file system pointed to by XS_PREVIOUS_INSTALLATION  to the new file system mounted on  / .  For an example of how this can be done, see the  %post  script in examples/userspace/helloworld-user.spec .", 
            "title": "Pack upgrade during a XenServer upgrade"
        }, 
        {
            "location": "/rules-and-guidelines/#pack-upgrade-on-an-existing-xenserver-installation", 
            "text": "It is expected that on each release of XenServer, supplemental pack\nauthors are likely to release new versions of their packs. However, if a\npack author releases an update between XenServer releases, existing\ninstallations of the old version of the pack would need to be upgraded.\nThis upgrade path is the responsibility of the pack author, as the\nlocation of the configuration data of the old version is on the root\nfile system, wherever the RPMs installed it to. The update installation\nprocess upgrades all RPMs contained within the pack, hence these RPMs\nshould be aware of how to deal with the existence of any relevant\nconfiguration files.", 
            "title": "Pack upgrade on an existing XenServer installation"
        }, 
        {
            "location": "/rules-and-guidelines/#uninstallation", 
            "text": "Supplemental Packs that only contain userspace packages may include a\nscript that removes the pack from a host.    Uninstalls the packages    Uninstalls other packages used to apply the pack    Causes xapi to remove the pack from the database", 
            "title": "Uninstallation"
        }, 
        {
            "location": "/rules-and-guidelines/#building-packs-in-existing-build-environments", 
            "text": "Citrix recognises that many partners have existing build systems that\nare used to produce the software that might be integrated into a\nsupplemental pack. To facilitate this, pack authors are  not  required\nto make use of the Driver Development Kit VM,  if  they are producing\npacks that do  not  contain drivers (as these need to be compiled for\nthe correct XenServer kernels).  If a pack author wishes to distribute drivers as part of a supplemental\npack, (or a pack consisting solely of drivers, commonly known as a\nDriver Disk), then the driver(s) will need to be compiled using the DDK.\nHowever, there is no barrier to pack authors including the driver disks\nthat are output by the DDK in their own build processes. Citrix does not\nsupport the compilation of drivers for XenServer in any way other than\nusing the DDK VM.  To build a supplemental pack (but not a driver) as part of an existing\nbuild process, the only package that is necessary from the Binary\nPackages ISO is  update-package .  These can be used in any environment to create an appropriate pack.\nNote, however, that this environment must contain various tools that are\nnormally found in standard Linux distributions, including  tar , mkisofs ,  sed , and  rpm .   Warning  When integrating these scripts as part of another build system, pack authors should bear in mind that Citrix may update these scripts as new versions of XenServer are released.\nPack authors should ensure that they update this package from the new version of the DDK before building packs for the new version of XenServer.   For pack authors who wish to produce a supplemental pack as an output of\nanother build system, but who wish to include drivers, the following\nprocedure should be followed:    Copy the driver source into a running DDK VM the corresponds to the\n    build of XenServer that the drivers will be targeted at.    Produce driver  RPMs  (rather than a supplemental pack ISO). This\n    can be achieved using the  $(RPM-FILE)  rule in the standard\n     Makefile  provided in the example packs.    By default, this command will output three driver RPMs into\n     /root/rpmbuild/RPMS/x86-64 . Pack authors should ignore the\n     debuginfo  RPM, and take the other RPMs for inclusion in their\n    supplemental pack. These RPMs can be treated in the same way as any\n    other RPM to be shipped in the pack.    These RPMs should be provided to the non-DDK build system, for\n    inclusion in the finished pack. Evidently, this process assumes that\n    pack authors will be releasing new versions of their packs more\n    frequently than the XenServer kernel is changed, or that introducing\n    new versions of RPMs into the alternative build system is more\n    acceptable than introducing the DDK as the build system.", 
            "title": "Building packs in existing build environments"
        }, 
        {
            "location": "/rules-and-guidelines/#packaging-driver-firmware", 
            "text": "It is increasingly common for hardware manufacturers to produce\ncomponents that load up-to-date firmware from the operating system that\nis running on the host machine. XenServer supports this mechanism, and\nfirmware packages should be installed to /lib/firmware/updates/ kernel . The firmware should be packaged in an\nRPM, and included as part of a supplemental pack.", 
            "title": "Packaging driver firmware"
        }, 
        {
            "location": "/rules-and-guidelines/#versioning", 
            "text": "", 
            "title": "Versioning"
        }, 
        {
            "location": "/rules-and-guidelines/#supplemental-pack-versioning", 
            "text": "Authors of supplemental packs are free to use whatever version numbering\nscheme they feel is appropriate for their pack. Given that many packs\nare likely to include RPMs of existing software, it is suggested that\nthe pack version number correspond to the version of the software it\ncontains. For example, if an existing management console RPM is at\nversion 5, it is likely to be less confusing if the first version of the\nsupplemental pack that contains this RPM is also version 5.  There is no reason why, if it is simple enough, a pack should not be\nsuitable for multiple releases of XenServer  provided  that it does not\ndepend on particular versions of other tools. In practice, Citrix is of\nthe opinion that packs should be re-released for each new version of\nXenServer, in order that they are also fully tested by the authors on\nthat new release. If a pack author chooses to release one pack for\nmultiple XenServer releases, they should ensure that the dependency\ninformation expressed in the metadata of the pack uses the  ge \ncomparator for the XenServer product, where the version to be compared\nagainst is the lowest supported version of XenServer.", 
            "title": "Supplemental pack versioning"
        }, 
        {
            "location": "/rules-and-guidelines/#kernel-module-versioning", 
            "text": "Each kernel module is built against a specific kernel version. This\nkernel version is included in the RPM name to enable multiple instances\nto be installed. The version fields of a kernel module RPM are used to\ntrack changes to a driver for a single kernel version. Each time a\ndriver is released for a particular kernel, the RPM version must be\nincreased (as would be expected, given that there will have been changes\nmade to the driver sources).  For example:  helloworld-modules-xen-2.6.18-128.1.6.el5.xs5.5.0.502.1014-1.0-1.i386.rpm\ndriver name = helloworld\nkernel flavour = xen\nkernel version = 2.6.18-128.1.6.el5.xs5.5.0.502.1014\nRPM version = 1.0\nRPM build = 1     XenServer Kernel version  Kernel module RPM version  Event      2.6.18.128.1.5...  1.0-1  Initial release of pack    2.6.18.128.1.5...  1.1-1  Driver bug fix    2.6.27.37...  2.0-1  New XenServer kernel, and new driver version     Therefore, if a supplemental pack contains a driver, it will be\nnecessary to rebuild that driver for each update and major release of\nXenServer. Note that hotfixes do not normally change the kernel version,\nand hence the same driver can be used until a XenServer update (\"service\npack\") is released.  As a general rule, if a pack contains only a single driver, it is\nstrongly recommended that the version numbering of the pack be the same\nas that of the driver.", 
            "title": "Kernel module versioning"
        }, 
        {
            "location": "/rules-and-guidelines/#packages-compiled-by-but-not-in-xenserver", 
            "text": "Some of the packages that are included in the XenServer control domain\nare taken directly from the base Linux distribution, whilst others are\nmodified and re-compiled by Citrix. In some cases, certain source RPMs,\nwhen compiled, result in more than one binary RPM. There exist a variety\nof packages where XenServer includes some, but not all, of the resulting\nbinaries; for example, the  net-snmp  package results in the binary\npackages  net-snmp  and  net-snmp-utils , but  net-snmp-utils  is not\nincluded in dom0.  If a supplemental pack author wishes to include a binary package that\nfalls into this category, that binary package will need to have the\ncorrect build number for the version of XenServer it is to be installed\nupon. Because Citrix re-compiles these packages, their build numbers\nwill have a XenServer-specific build number extension. Therefore, pack\nauthors will need to obtain these binary RPMs from Citrix.  To enable this process to be as simple as possible, Citrix produces an\nextra ISO ( binpkg.iso ) for each release of XenServer that contains all\nthe packages that fall into this category. Partners should contact\nCitrix to obtain this ISO.", 
            "title": "Packages compiled by, but not in, XenServer"
        }, 
        {
            "location": "/rules-and-guidelines/#requirements-for-submission-of-drivers-for-inclusion-in-xenserver", 
            "text": "Citrix encourages hardware vendors to submit any driver disks released\nfor XenServer to Citrix in order that the drivers may be incorporated\ninto the next release of the product. In order to make this process as\nsimple as possible, vendors are requested to take note of the following\nrequirements:    Any driver submitted must include its full source code, that is\n    available under an open source license compatible with the GNU\n    General Public License (GPL).    Any binary firmware submitted must either be already publicly\n    available under a license allowing re-distribution, or the vendor\n    must have a current re-distribution agreement with Citrix.    If a new, (rather than an update to an existing) driver is being\n    submitted, Citrix will review it in order to confirm that it is\n    compatible with the current support statements made concerning\n    XenServer. It may be that a driver is rejected because it is\n    monolithic, or enables a feature which is not currently officially\n    supported. This may also be the case with radical changes made to\n    drivers that are already in the product. Partners who consider that\n    their driver(s) fall into this category should contact Citrix as\n    early as possible, in order that both organizations' engineering\n    teams are able to ascertain how to proceed.    Strict time limits apply to submissions (see below). Vendors should\n    make their drivers available to Citrix as soon as possible, rather\n    than waiting until these deadlines, as testing may result in fixes\n    being required, which then need to be integrated into the product.    Certain drivers are deemed critical to automated testing by Citrix\n    of XenServer. Any (entire-driver) updates to these drivers must be\n    provided a minimum of 6 weeks prior to the beta RTM date of the\n    release in which they are to be included. Partners whose drivers are\n    on this list will be informed of this constraint.    All other entire-driver updates (or new drivers) must be provided to\n    Citrix a minimum of 5 weeks prior to beta RTM.    Any updates to drivers (for example, no new drivers) received after\n    these dates must be in the form of small, targeted fixes for\n    specific issues. Patches must be submitted that can be understood by\n    a reasonably experienced person, together with a description of the\n    flaw that particular patch addresses. Each fix should be in the form\n    of a separate patch, with an indication of what the flaw fixed is,\n    the effects the flaw would have if it is not addressed, and whether\n    such issues have already been seen by customers. Significant\n    additions of functionality, or very large patches will not be\n    accepted.    Close to the RTM date of the beta of the release concerned, it is\n    unlikely that patches will be inserted into the beta release (though\n    they may be incorporated into the final release, if they are judged\n    to be of sufficient importance). Only in exceptional circumstances\n    will patches received fewer than 2 weeks prior to beta RTM be\n    incorporated into the beta. The preferred target for all driver\n    updates is the beta release, in order to achieve maximum testing\n    benefit.    Submitting a GPG Key: Once the key has been generated, when creating\n    the update pack, the name of the GPG key is baked into the Yum repo\n    metadata. This means the public key file cannot be renamed without\n    resigning the Update package.  When the key-pair has been generated, export the public part (using\nASCI Armor) and create a ticket on  Citrix Issue\nTracker  to include it in the inbox.", 
            "title": "Requirements for submission of drivers for inclusion in XenServer"
        }, 
        {
            "location": "/rules-and-guidelines/#does-xenserver-already-include-a-driver-for-my-device", 
            "text": "XenServer includes a wide variety of drivers, including many that are\ndistributed (inbox) with the kernel that dom0 is based upon. It may\ntherefore be the case that XenServer includes a driver that enables a\ndevice that is not present on the XenServer Hardware Compatibility List\n(HCL). This is particularly the case where a device is sold by multiple\ncompanies, each of which refers to it with a different name.  Because each driver included in XenServer includes information\nconcerning which PCI device IDs it claims, the simplest way to ascertain\nwhether a device is supported is to first find its device ID.  If the device is present in a running Linux-based system, the  lspci -v \ncommand can be used, which will provide output which includes the\ninformation on all devices present in the host. If the  -n  switch is\ngiven, numeric IDs will be provided.  If only the name of the device is known, use the PCI ID database\n( http://pciids.sourceforge.net/pci.ids ) to ascertain what the ID of\nthe device is. This database will also provide alternate names for the\ndevice, which may of use if the exact name is not listed in the\nXenServer HCL.  If the an alternate name for the device is not found on the HCL, then\neither the device has not been tested on XenServer, or a driver for it\nis not included in XenServer. To confirm whether a suitable driver is\nincluded, consult the list of PCI IDs the XenServer kernel supports,\nfound in  /lib/modules/ version /modules.pcimap .", 
            "title": "Does XenServer already include a driver for my device?"
        }, 
        {
            "location": "/testing-and-certification/", 
            "text": "Testing and certification\n\n\nXenServer uses a modified Linux kernel that is similar but not identical\nto the kernel distributed by a popular Linux distribution. In contrast,\nthe XenServer control domain is currently based on a different\ndistribution. In addition, the 32 bit XenServer control domain kernel is\nrunning above the 80K lines of code that are the 64 bit Xen hypervisor\nitself. While Citrix is very confident in the stability of the\nhypervisor, its presence represents a different software installation\nthan exists with the stock vendor kernel installed on bare hardware.\n\n\nIn particular, there are issues that may be taken for granted on an x86\nprocessor, such as the difference between physical and device bus memory\naddresses (for example \nvirt_to_phys()\n as opposed to\n\nvirt_to_bus()\n), timing, and interrupt delivery which may have\nsubtle differences in a hypervisor environment.\n\n\nFor these reasons hardware drivers should be exposed to a set of testing\non the XenServer control domain kernel to ensure the same level of\nconfidence that exists for drivers in enterprise distribution releases.\nSimilarly, userspace software that is included in supplemental packs\nmust be tested comprehensively, to ensure that the assumptions it makes\nabout the environment in which it runs (for example, concerning the\npresence of certain executables) are not invalidated.\n\n\nThe remainder of this section considers driver testing. Partners who\nwish to release supplemental packs do not only contain drivers should\ncontact Citrix for advice. As a minimum, such pack authors should expect\nto comprehensively test the functionality of the software being included\nin the pack, as well as perform stress testing of the XenServer major\nfeatures, to ensure that none are impacted by the software in the pack.\n\n\nTesting scope\n\n\nAssuming the driver in question has already undergone verification\ntesting on a Linux distribution very similar to the one used in the\nXenServer control domain, a subset of the verification test suite with a\nfocus on representative tests is typically sufficient.\n\n\nSome common areas of focus are:\n\n\n\n\n\n\nInstallation verification.\n Installation is now performed using an\n    RPM, which may be different from how the driver is typically\n    installed.\n\n\n\n\n\n\nCLI operation.\n If a CLI is included, its operation is a key\n    scenario and typically provides a good end-to-end exercising of all\n    related code.\n\n\n\n\n\n\nAdapter configuration, non-volatile/flash RAM, or BIOS upgrades.\n\n    Any functions that access the physical hardware should be verified\n    due to the presence of the Xen hypervisor and its role in\n    coordination of hardware resources amongst virtual machines.\n\n\n\n\n\n\nData integrity and fault injection.\n Long-haul and/or stress-based\n    data integrity verification tests to verify no data corruption\n    issues exist. Basic fault injection tests such as cable\n    un-plug/re-plug and timeout handling for verification of common\n    error conditions.\n\n\n\n\n\n\nCoverage of a representative set of device models.\n For example, if\n    a Fibre Channel HBA driver supports a set of models that operate at\n    either 2 Gb/s or 4 Gb/s, include one model each from the 2 Gb/s and\n    4 Gb/s families for testing.\n\n\n\n\n\n\nKey hardware configuration variations.\n Any hardware configurations\n    that exercise the driver or related code in significantly different\n    ways should be run, such as locally versus remotely attached\n    storage.\n\n\n\n\n\n\nRunning tests\n\n\nSince the physical device drivers run in the XenServer control domain,\nthe majority of tests will also be run in the control domain. This\nallows simple re-use of existing Linux-based tests.\n\n\nTo provide high-performance device I/O to guest domains, XenServer\nincludes synthetic device drivers for storage and networking that run in\na guest and communicate their I/O requests with corresponding back-end\ndrivers running in the control domain. The back-end drivers then issue\nthe I/O requests to the physical drivers and devices and manage\ntransmitting results and completion notifications to the synthetic\ndrivers. This approach provides near bare-metal performance.\n\n\nAs a result, tests that require direct access to the device will fail\nwhen run within a guest domain. However, running load-generation and\nother tests that do not require direct access to the device and/or\ndriver within Linux and Windows guest domains is very valuable as such\ntests represent how the majority of load will be processed in actual\nXenServer installations.\n\n\nWhen running tests in guest domains, ensure that you do so with the\nXenServer synthetic drivers installed in the guest domain. Installation\nof the synthetic drivers is a manual process for some guests. See\nXenServer Help for more details.\n\n\nTests that require an integrated build\n\n\nOne of the primary goals of the DDK is to allow partners to create,\ncompile, and test their drivers with XenServer without requiring a\n\u201cback-and-forth\u201d of components with the XenServer engineering team.\n\n\nHowever, some tests will only be possible after the driver RPMs and any\naccompanying binary RPMs have been supplied to Citrix and integrated\ninto the XenServer product. Two examples are installing to, and booting\nfrom, Fibre Channel and iSCSI LUNs.\n\n\nIn these cases additional coordination is required after the components\nhave been provided to Citrix to provide a pre-release XenServer build\nwith the integrated components for testing.\n\n\nCertification \n support\n\n\nDrivers\n\n\nCitrix maintains a XenServer Hardware Compatibility List (HCL), found at\n\nhcl.vmd.citrix.com\n. This lists all devices\nthat have been tested and confirmed to function correctly with the\nXenServer product.\n\n\nIn order to be listed on the XenServer HCL, hardware vendors must\nutilize the appropriate certification kit, obtainable from\n\nhttp://www.citrix.com/ready/hcl\n. The test kits contain a mix of manual\nand automated tests that are run on a host that contains the hardware to\nbe certified. In general, two such hosts are required to perform the\ntests. Test results are submitted to Citrix for validation, and if they\nare approved, the device is listed on the HCL within a small number of\nworking days, along with a link to the supplemental pack that contains\nany necessary driver, if this has not yet been incorporated into the\nXenServer product. In general, such supplemental packs will be hosted on\npartner web sites, though Citrix may additionally opt to link to (or\nhost) the pack on its own Knowledge Base site.\n\n\nFor certification of converged or hybrid devices, such as CNAs, \neach\n\nfunction of the device must be separately certified. This implies that\nfor a device with both networking and storage (HBA) functionality, both\nthe networking certification tests and the storage certification tests\nmust be carried out.\n\n\nThere is no restriction on who is permitted to submit certifications to\nthe XenServer HCL, for example, it is \nnot\n the case that only the\nhardware vendor can submit certifications for their products. Having\nsaid this, Citrix strongly prefers hardware vendors to perform\ncertification testing, as they are best placed to test all of their\nproducts' features.\n\n\nOnce a device is listed on the HCL, Citrix will take support calls from\ncustomers who are using that device with XenServer. It is expected that\npartners who submit devices for inclusion in the HCL will collaborate\nwith Citrix to provide a fix for any issue that is later found with\nXenServer which is caused by said device.\n\n\nUserspace software\n\n\nAt present, supplemental packs that contain userspace software to be\ninstalled into dom0 may only be issued by partners who have agreements\nin place with Citrix where the partner provides level 1 and level 2\nsupport to their customers.\n\n\nThe reason for this is because Citrix will not necessarily have had the\nopportunity to test a supplemental pack of a partner, and hence must\nrely on partner testing of the pack as installed on XenServer.\nTherefore, only partners who perform testing that has been agreed as\nsufficient by Citrix can ship supplemental packs. If a customer installs\na pack that is not from an approved partner, their configuration will be\ndeemed unsupported by Citrix: any issues found will need to be\nreproduced on a standard installation of XenServer, without the pack\ninstalled, if support is to be given.\n\n\nPartners who wish to produce supplemental packs that contain more than\nsolely drivers should discuss this with their Citrix relationship\nmanager as early as possible, in order to discuss what software is\nappropriate for inclusion, and what testing should be performed.", 
            "title": "Testing and Certification"
        }, 
        {
            "location": "/testing-and-certification/#testing-and-certification", 
            "text": "XenServer uses a modified Linux kernel that is similar but not identical\nto the kernel distributed by a popular Linux distribution. In contrast,\nthe XenServer control domain is currently based on a different\ndistribution. In addition, the 32 bit XenServer control domain kernel is\nrunning above the 80K lines of code that are the 64 bit Xen hypervisor\nitself. While Citrix is very confident in the stability of the\nhypervisor, its presence represents a different software installation\nthan exists with the stock vendor kernel installed on bare hardware.  In particular, there are issues that may be taken for granted on an x86\nprocessor, such as the difference between physical and device bus memory\naddresses (for example  virt_to_phys()  as opposed to virt_to_bus() ), timing, and interrupt delivery which may have\nsubtle differences in a hypervisor environment.  For these reasons hardware drivers should be exposed to a set of testing\non the XenServer control domain kernel to ensure the same level of\nconfidence that exists for drivers in enterprise distribution releases.\nSimilarly, userspace software that is included in supplemental packs\nmust be tested comprehensively, to ensure that the assumptions it makes\nabout the environment in which it runs (for example, concerning the\npresence of certain executables) are not invalidated.  The remainder of this section considers driver testing. Partners who\nwish to release supplemental packs do not only contain drivers should\ncontact Citrix for advice. As a minimum, such pack authors should expect\nto comprehensively test the functionality of the software being included\nin the pack, as well as perform stress testing of the XenServer major\nfeatures, to ensure that none are impacted by the software in the pack.", 
            "title": "Testing and certification"
        }, 
        {
            "location": "/testing-and-certification/#testing-scope", 
            "text": "Assuming the driver in question has already undergone verification\ntesting on a Linux distribution very similar to the one used in the\nXenServer control domain, a subset of the verification test suite with a\nfocus on representative tests is typically sufficient.  Some common areas of focus are:    Installation verification.  Installation is now performed using an\n    RPM, which may be different from how the driver is typically\n    installed.    CLI operation.  If a CLI is included, its operation is a key\n    scenario and typically provides a good end-to-end exercising of all\n    related code.    Adapter configuration, non-volatile/flash RAM, or BIOS upgrades. \n    Any functions that access the physical hardware should be verified\n    due to the presence of the Xen hypervisor and its role in\n    coordination of hardware resources amongst virtual machines.    Data integrity and fault injection.  Long-haul and/or stress-based\n    data integrity verification tests to verify no data corruption\n    issues exist. Basic fault injection tests such as cable\n    un-plug/re-plug and timeout handling for verification of common\n    error conditions.    Coverage of a representative set of device models.  For example, if\n    a Fibre Channel HBA driver supports a set of models that operate at\n    either 2 Gb/s or 4 Gb/s, include one model each from the 2 Gb/s and\n    4 Gb/s families for testing.    Key hardware configuration variations.  Any hardware configurations\n    that exercise the driver or related code in significantly different\n    ways should be run, such as locally versus remotely attached\n    storage.", 
            "title": "Testing scope"
        }, 
        {
            "location": "/testing-and-certification/#running-tests", 
            "text": "Since the physical device drivers run in the XenServer control domain,\nthe majority of tests will also be run in the control domain. This\nallows simple re-use of existing Linux-based tests.  To provide high-performance device I/O to guest domains, XenServer\nincludes synthetic device drivers for storage and networking that run in\na guest and communicate their I/O requests with corresponding back-end\ndrivers running in the control domain. The back-end drivers then issue\nthe I/O requests to the physical drivers and devices and manage\ntransmitting results and completion notifications to the synthetic\ndrivers. This approach provides near bare-metal performance.  As a result, tests that require direct access to the device will fail\nwhen run within a guest domain. However, running load-generation and\nother tests that do not require direct access to the device and/or\ndriver within Linux and Windows guest domains is very valuable as such\ntests represent how the majority of load will be processed in actual\nXenServer installations.  When running tests in guest domains, ensure that you do so with the\nXenServer synthetic drivers installed in the guest domain. Installation\nof the synthetic drivers is a manual process for some guests. See\nXenServer Help for more details.", 
            "title": "Running tests"
        }, 
        {
            "location": "/testing-and-certification/#tests-that-require-an-integrated-build", 
            "text": "One of the primary goals of the DDK is to allow partners to create,\ncompile, and test their drivers with XenServer without requiring a\n\u201cback-and-forth\u201d of components with the XenServer engineering team.  However, some tests will only be possible after the driver RPMs and any\naccompanying binary RPMs have been supplied to Citrix and integrated\ninto the XenServer product. Two examples are installing to, and booting\nfrom, Fibre Channel and iSCSI LUNs.  In these cases additional coordination is required after the components\nhave been provided to Citrix to provide a pre-release XenServer build\nwith the integrated components for testing.", 
            "title": "Tests that require an integrated build"
        }, 
        {
            "location": "/testing-and-certification/#certification-support", 
            "text": "", 
            "title": "Certification &amp; support"
        }, 
        {
            "location": "/testing-and-certification/#drivers", 
            "text": "Citrix maintains a XenServer Hardware Compatibility List (HCL), found at hcl.vmd.citrix.com . This lists all devices\nthat have been tested and confirmed to function correctly with the\nXenServer product.  In order to be listed on the XenServer HCL, hardware vendors must\nutilize the appropriate certification kit, obtainable from http://www.citrix.com/ready/hcl . The test kits contain a mix of manual\nand automated tests that are run on a host that contains the hardware to\nbe certified. In general, two such hosts are required to perform the\ntests. Test results are submitted to Citrix for validation, and if they\nare approved, the device is listed on the HCL within a small number of\nworking days, along with a link to the supplemental pack that contains\nany necessary driver, if this has not yet been incorporated into the\nXenServer product. In general, such supplemental packs will be hosted on\npartner web sites, though Citrix may additionally opt to link to (or\nhost) the pack on its own Knowledge Base site.  For certification of converged or hybrid devices, such as CNAs,  each \nfunction of the device must be separately certified. This implies that\nfor a device with both networking and storage (HBA) functionality, both\nthe networking certification tests and the storage certification tests\nmust be carried out.  There is no restriction on who is permitted to submit certifications to\nthe XenServer HCL, for example, it is  not  the case that only the\nhardware vendor can submit certifications for their products. Having\nsaid this, Citrix strongly prefers hardware vendors to perform\ncertification testing, as they are best placed to test all of their\nproducts' features.  Once a device is listed on the HCL, Citrix will take support calls from\ncustomers who are using that device with XenServer. It is expected that\npartners who submit devices for inclusion in the HCL will collaborate\nwith Citrix to provide a fix for any issue that is later found with\nXenServer which is caused by said device.", 
            "title": "Drivers"
        }, 
        {
            "location": "/testing-and-certification/#userspace-software", 
            "text": "At present, supplemental packs that contain userspace software to be\ninstalled into dom0 may only be issued by partners who have agreements\nin place with Citrix where the partner provides level 1 and level 2\nsupport to their customers.  The reason for this is because Citrix will not necessarily have had the\nopportunity to test a supplemental pack of a partner, and hence must\nrely on partner testing of the pack as installed on XenServer.\nTherefore, only partners who perform testing that has been agreed as\nsufficient by Citrix can ship supplemental packs. If a customer installs\na pack that is not from an approved partner, their configuration will be\ndeemed unsupported by Citrix: any issues found will need to be\nreproduced on a standard installation of XenServer, without the pack\ninstalled, if support is to be given.  Partners who wish to produce supplemental packs that contain more than\nsolely drivers should discuss this with their Citrix relationship\nmanager as early as possible, in order to discuss what software is\nappropriate for inclusion, and what testing should be performed.", 
            "title": "Userspace software"
        }, 
        {
            "location": "/additional-resources/", 
            "text": "Additional Resources\n\n\nIn addition to supplemental packs, a variety of mechanisms are available\nfor partners to interface with XenServer, and add value to the user\nexperience. This chapter overviews the mechanisms, and provides web\nlinks to further information.\n\n\nIf pack authors have any questions concerning what should (or should\nnot) be included in a pack, or how a particular customization goal might\nbe achieved, they are encouraged to contact their Citrix technical\naccount manager.\n\n\nXen API plug-ins\n\n\nWhilst the Xen API provides a wide variety of calls to interface with\nXenServer, partners have the opportunity to add to the API by means of\nXAPI plug-ins. These consist of Python scripts that are installed as\npart of supplemental packs, that can be run by using the\n\nhost.call_plugin\n XAPI call. These plug-ins can perform arbitrary\noperations, including running commands in dom0, and making further XAPI\ncalls, using the XAPI Python language bindings.\n\n\nFor examples of how XAPI plug-ins can be used, please see the example\nplug-ins in the \n/etc/xapi.d/plugins/\n directory of a standard XenServer\ninstallation.\n\n\nXenCenter plug-ins\n\n\nXenCenter plug-ins provides the facility for partners to add new menus\nand tabs to the XenCenter administration GUI. In particular, new tabs\ncan have an embedded web browser, meaning that existing web-based\nmanagement interfaces can easily be displayed. When combined with Xen\nAPI plug-ins to drive new menu items, this feature can be used by\npartners to integrate features from their supplemental packs into one\ncentralized management interface for XenServer.\n\n\nFor further information, please see\n\nhttp://community.citrix.com/display/xs/XenCenter+Plugins\n.\n\n\nXenServer SDK\n\n\nThe XenServer SDK VM is a virtual machine appliance, ready to be\nimported into a XenServer host. It contains the complete set of\nXenServer SDKs, plus a complete Linux-based development environment.\nLanguage bindings are available for C, C#, Python, and Java, and a\nWindows PowerShell snap-in is also available. The SDK VM allows partners\nto easily develop solutions that utilize the rich API exposed by all\nXenServer hosts. The SDK VM is intended only as a convenient development\nenvironment: for an application developed against the appropriate\nlanguage bindings to be distributed, only the relevant bindings are\nrequired (\nnot\n the entire SDK VM).\n\n\nFor further information, please see\n\nhttp://community.citrix.com/display/xs/Download+SDKs\n.", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/additional-resources/#additional-resources", 
            "text": "In addition to supplemental packs, a variety of mechanisms are available\nfor partners to interface with XenServer, and add value to the user\nexperience. This chapter overviews the mechanisms, and provides web\nlinks to further information.  If pack authors have any questions concerning what should (or should\nnot) be included in a pack, or how a particular customization goal might\nbe achieved, they are encouraged to contact their Citrix technical\naccount manager.", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/additional-resources/#xen-api-plug-ins", 
            "text": "Whilst the Xen API provides a wide variety of calls to interface with\nXenServer, partners have the opportunity to add to the API by means of\nXAPI plug-ins. These consist of Python scripts that are installed as\npart of supplemental packs, that can be run by using the host.call_plugin  XAPI call. These plug-ins can perform arbitrary\noperations, including running commands in dom0, and making further XAPI\ncalls, using the XAPI Python language bindings.  For examples of how XAPI plug-ins can be used, please see the example\nplug-ins in the  /etc/xapi.d/plugins/  directory of a standard XenServer\ninstallation.", 
            "title": "Xen API plug-ins"
        }, 
        {
            "location": "/additional-resources/#xencenter-plug-ins", 
            "text": "XenCenter plug-ins provides the facility for partners to add new menus\nand tabs to the XenCenter administration GUI. In particular, new tabs\ncan have an embedded web browser, meaning that existing web-based\nmanagement interfaces can easily be displayed. When combined with Xen\nAPI plug-ins to drive new menu items, this feature can be used by\npartners to integrate features from their supplemental packs into one\ncentralized management interface for XenServer.  For further information, please see http://community.citrix.com/display/xs/XenCenter+Plugins .", 
            "title": "XenCenter plug-ins"
        }, 
        {
            "location": "/additional-resources/#xenserver-sdk", 
            "text": "The XenServer SDK VM is a virtual machine appliance, ready to be\nimported into a XenServer host. It contains the complete set of\nXenServer SDKs, plus a complete Linux-based development environment.\nLanguage bindings are available for C, C#, Python, and Java, and a\nWindows PowerShell snap-in is also available. The SDK VM allows partners\nto easily develop solutions that utilize the rich API exposed by all\nXenServer hosts. The SDK VM is intended only as a convenient development\nenvironment: for an application developed against the appropriate\nlanguage bindings to be distributed, only the relevant bindings are\nrequired ( not  the entire SDK VM).  For further information, please see http://community.citrix.com/display/xs/Download+SDKs .", 
            "title": "XenServer SDK"
        }
    ]
}